(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{JBi1:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return s})),n.d(e,"default",(function(){return x}));var o=n("k0FJ"),a=n("oedh"),l=n("mXGw"),b=n("/FXl"),r=n("TjRS"),i=n("ZFoC"),c=n("qo4J"),p=n("1PJk"),d=n("5MeH"),u=(n("aD51"),["components"]),s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Modal/demos/index.cn.mdx"}});var m={_frontmatter:s},f=r.a;function x(t){var e,n,x,g=t.components,j=Object(a.a)(t,u);return Object(b.b)(f,Object(o.a)({},m,j,{components:g,mdxType:"MDXLayout"}),Object(b.b)("h4",{id:"简介"},"简介"),Object(b.b)("p",null,"模态，用于重量级的交互提示上。不提供预置的功能区块，取消、确认按钮等，只提供基础的过渡动画和蒙版等效果。"),Object(b.b)("h2",{id:"放置容器"},"放置容器"),Object(b.b)("p",null,"Modal需要一个容器来放置，通过 container 属性指定一个合法的DOM HTML元素指定。"),Object(b.b)("p",null,"如果未指定，将默认在body项下生成 id 为 'modal-container' 的div元素作为放置容器。"),Object(b.b)("h2",{id:"开关与基础用法"},"开关与基础用法"),Object(b.b)("p",null,"通过设置 open 属性开关Modal。"),Object(b.b)("p",null,"Modal框的包裹容器，即Modal组件本身，会自适应子元素的宽高。"),Object(b.b)("p",null,"也可以通过 className, style 属性，直接设置其样式。"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Modal from '../index';\nconst Modal1Content = styled.div`\n    display: inline-block;\n    width: 400px;\n    height: 300px;\n    background-color: #fff;\n    border-radius: 4px;\n    box-shadow: 1px 1px 10px 1px rgba(0, 0, 0, .5);\n`\nconst Modal2 = styled(Modal)`\n    width: 200px;\n    height: 100px;\n    background-color: #fff;\n    border-radius: 4px;\n    box-shadow: 1px 1px 10px 1px rgba(0, 0, 0, .5);\n`\nconst BasicDemo = () => {\n    const [open1, set1] = useState(false);\n    const [open2, set2] = useState(false);\n    return (\n        <>\n            <button onClick={() => set1(true)}>打开Modal1</button>\n            <Modal open={open1}>\n                <Modal1Content>\n                    <p>这是模态框1</p>\n                    <button onClick={() => set1(false)}>关闭Modal1</button>\n                </Modal1Content>\n            </Modal>\n            <button onClick={() => set2(true)}>打开Modal2</button>\n            <Modal2 open={open2} style={{ color: 'red '}}>\n                <p>这是模态框2</p>\n                <button onClick={() => set2(false)}>关闭Modal2</button>\n            </Modal2>\n        </>\n    );\n}\n")),Object(b.b)(i.c,{__position:0,__code:"<BasicDemo />",__scope:(e={props:j,DefaultLayout:r.a,Playground:i.c,Modal:c.a,BasicDemo:p.a,CloseDemo:d.a},e.DefaultLayout=r.a,e._frontmatter=s,e),mdxType:"Playground"},Object(b.b)(p.a,{mdxType:"BasicDemo"})),Object(b.b)("br",null),Object(b.b)("h2",{id:"按esc键与点击其他位置关闭"},"按esc键与点击其他位置关闭"),Object(b.b)("p",null,"通过设置 escToClose(默认为true) 和 clickToClose 这两个属性为true， 使在按下esc键和点击页面非模态框的其他位置时，触发Modal的onClose事件。"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Modal from '../index';\n\nconst Content = styled.div`\n    display: inline-block;\n    width: 400px;\n    height: 300px;\n    background-color: #fff;\n    border-radius: 4px;\n    box-shadow: 1px 1px 10px 1px rgba(0, 0, 0, .5);\n`\n\nconst CloseDemo = () => {\n    const [open, set] = useState(false);\n    const openModal = () => {\n        set(true);\n    }\n    const closeModal = () => {\n        set(false);\n    }\n    return (\n        <>\n            <button onClick={openModal}>打开Modal</button>\n            <Modal open={open} escToClose clickToClose onClose={closeModal} >\n                <Content>\n                    <p>按esc键或者点击其他地方关闭</p>\n                </Content>\n            </Modal>\n        </>\n    );\n}\n")),Object(b.b)(i.c,{__position:2,__code:"<CloseDemo />",__scope:(n={props:j,DefaultLayout:r.a,Playground:i.c,Modal:c.a,BasicDemo:p.a,CloseDemo:d.a},n.DefaultLayout=r.a,n._frontmatter=s,n),mdxType:"Playground"},Object(b.b)(d.a,{mdxType:"CloseDemo"})),Object(b.b)("br",null),Object(b.b)("h2",{id:"自定义进出场动画"},"自定义进出场动画"),Object(b.b)("p",null,"通过设置 animationType 属性改变进出场动画。"),Object(b.b)("p",null,'animationType 可为 "zoom"(默认) | "fade" | "flip" | "door" | "slideUp" | "slideDown" | "slideRight" | "slideLeft" | "rotate" | "blur" | "clipRectSp" | "clipRect" | "clipCircle" 设置进出场动画。'),Object(b.b)("p",null,"通过设置 animationDuration 属性(ms)，修改进出场动画持续时间"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"type animationDuration = number | { enter: number, leave: number }\n")),Object(b.b)(i.c,{__position:4,__code:"() => {\n  const [zoom, setZoom] = React.useState(false)\n  const [flip, setFlip] = React.useState(false)\n  const [door, setDoor] = React.useState(false)\n  const [slideUp, setSlideUp] = React.useState(false)\n  const [slideDown, setSlideDown] = React.useState(false)\n  const [slideLeft, setSlideLeft] = React.useState(false)\n  const [slideRight, setSlideRight] = React.useState(false)\n  const [rotate, setRotate] = React.useState(false)\n  const [clipRectSp, setClipRectSp] = React.useState(false)\n  const [clipRect, setSlipRect] = React.useState(false)\n  const [clipCircle, setClipCircle] = React.useState(false)\n  const [blur, setBlur] = React.useState(false)\n  return (\n    <>\n      <button onClick={() => setZoom(true)}>打开 zoom</button>\n      <Modal\n        animationType=\"zoom\"\n        open={zoom}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setZoom(false)}>关闭 zoom</button>\n      </Modal>\n      <button onClick={() => setFlip(true)}>打开 flip</button>\n      <Modal\n        animationType=\"flip\"\n        open={flip}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setFlip(false)}>关闭 flip</button>\n      </Modal>\n      <button onClick={() => setDoor(true)}>打开 door</button>\n      <Modal\n        animationType=\"door\"\n        open={door}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setDoor(false)}>关闭 door</button>\n      </Modal>\n      <button onClick={() => setSlideUp(true)}>打开 slideUp</button>\n      <Modal\n        animationType=\"slideUp\"\n        open={slideUp}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setSlideUp(false)}>关闭 slideUp</button>\n      </Modal>\n      <button onClick={() => setSlideDown(true)}>打开 slideDown</button>\n      <Modal\n        animationType=\"slideDown\"\n        open={slideDown}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setSlideDown(false)}>关闭 slideDown</button>\n      </Modal>\n      <button onClick={() => setSlideLeft(true)}>打开 slideLeft</button>\n      <Modal\n        animationType=\"slideLeft\"\n        open={slideLeft}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setSlideLeft(false)}>关闭 slideLeft</button>\n      </Modal>\n      <button onClick={() => setSlideRight(true)}>打开 slideRight</button>\n      <Modal\n        animationType=\"slideRight\"\n        open={slideRight}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setSlideRight(false)}>关闭 slideRight</button>\n      </Modal>\n      <button onClick={() => setRotate(true)}>打开 rotate</button>\n      <Modal\n        animationType=\"rotate\"\n        open={rotate}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setRotate(false)}>关闭 rotate</button>\n      </Modal>\n      <button onClick={() => setClipRectSp(true)}>打开 clipRectSp</button>\n      <Modal\n        animationType=\"clipRectSp\"\n        open={clipRectSp}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setClipRectSp(false)}>关闭 clipRectSp</button>\n      </Modal>\n      <button onClick={() => setSlipRect(true)}>打开 clipRect</button>\n      <Modal\n        animationType=\"clipRect\"\n        open={clipRect}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setSlipRect(false)}>关闭 clipRect</button>\n      </Modal>\n      <button onClick={() => setClipCircle(true)}>打开 clipCircle</button>\n      <Modal\n        animationType=\"clipCircle\"\n        open={clipCircle}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setClipCircle(false)}>关闭 clipCircle</button>\n      </Modal>\n      <button onClick={() => setBlur(true)}>打开blur</button>\n      <Modal\n        animationType=\"blur\"\n        open={blur}\n        style={{\n          width: 400,\n          height: 300,\n          backgroundColor: '#fff',\n          boxShadow: '1px 1px 10px 1px rgba(0, 0, 0, .5)',\n          borderRadius: 4,\n        }}\n      >\n        <button onClick={() => setBlur(false)}>关闭 blur</button>\n      </Modal>\n    </>\n  )\n}",__scope:(x={props:j,DefaultLayout:r.a,Playground:i.c,Modal:c.a,BasicDemo:p.a,CloseDemo:d.a},x.DefaultLayout=r.a,x._frontmatter=s,x),mdxType:"Playground"},(function(){var t=l.useState(!1),e=t[0],n=t[1],o=l.useState(!1),a=o[0],r=o[1],i=l.useState(!1),p=i[0],d=i[1],u=l.useState(!1),s=u[0],m=u[1],f=l.useState(!1),x=f[0],g=f[1],j=l.useState(!1),O=j[0],h=j[1],C=l.useState(!1),y=C[0],k=C[1],S=l.useState(!1),w=S[0],M=S[1],R=l.useState(!1),N=R[0],T=R[1],D=l.useState(!1),_=D[0],L=D[1],v=l.useState(!1),P=v[0],U=v[1],z=l.useState(!1),B=z[0],F=z[1];return Object(b.b)(l.Fragment,null,Object(b.b)("button",{onClick:function(){return n(!0)}},"打开 zoom"),Object(b.b)(c.a,{animationType:"zoom",open:e,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return n(!1)}},"关闭 zoom")),Object(b.b)("button",{onClick:function(){return r(!0)}},"打开 flip"),Object(b.b)(c.a,{animationType:"flip",open:a,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return r(!1)}},"关闭 flip")),Object(b.b)("button",{onClick:function(){return d(!0)}},"打开 door"),Object(b.b)(c.a,{animationType:"door",open:p,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return d(!1)}},"关闭 door")),Object(b.b)("button",{onClick:function(){return m(!0)}},"打开 slideUp"),Object(b.b)(c.a,{animationType:"slideUp",open:s,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return m(!1)}},"关闭 slideUp")),Object(b.b)("button",{onClick:function(){return g(!0)}},"打开 slideDown"),Object(b.b)(c.a,{animationType:"slideDown",open:x,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return g(!1)}},"关闭 slideDown")),Object(b.b)("button",{onClick:function(){return h(!0)}},"打开 slideLeft"),Object(b.b)(c.a,{animationType:"slideLeft",open:O,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return h(!1)}},"关闭 slideLeft")),Object(b.b)("button",{onClick:function(){return k(!0)}},"打开 slideRight"),Object(b.b)(c.a,{animationType:"slideRight",open:y,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return k(!1)}},"关闭 slideRight")),Object(b.b)("button",{onClick:function(){return M(!0)}},"打开 rotate"),Object(b.b)(c.a,{animationType:"rotate",open:w,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return M(!1)}},"关闭 rotate")),Object(b.b)("button",{onClick:function(){return T(!0)}},"打开 clipRectSp"),Object(b.b)(c.a,{animationType:"clipRectSp",open:N,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return T(!1)}},"关闭 clipRectSp")),Object(b.b)("button",{onClick:function(){return L(!0)}},"打开 clipRect"),Object(b.b)(c.a,{animationType:"clipRect",open:_,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return L(!1)}},"关闭 clipRect")),Object(b.b)("button",{onClick:function(){return U(!0)}},"打开 clipCircle"),Object(b.b)(c.a,{animationType:"clipCircle",open:P,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return U(!1)}},"关闭 clipCircle")),Object(b.b)("button",{onClick:function(){return F(!0)}},"打开blur"),Object(b.b)(c.a,{animationType:"blur",open:B,style:{width:400,height:300,backgroundColor:"#fff",boxShadow:"1px 1px 10px 1px rgba(0, 0, 0, .5)",borderRadius:4},mdxType:"Modal"},Object(b.b)("button",{onClick:function(){return F(!1)}},"关闭 blur")))})),Object(b.b)("br",null),Object(b.b)("h2",{id:"自定义位置与外层容器样式"},"自定义位置与外层容器样式"),Object(b.b)("p",null,"Modal框外有一层position为fixed的包裹容器用于使Modal相对窗口居中。"),Object(b.b)("p",null,"可以通过 wrapperClassName， wrapperStyle 属性设置其样式，调整位置。"),Object(b.b)("br",null),Object(b.b)("h2",{id:"蒙版"},"蒙版"),Object(b.b)("p",null,"通过设置 showMask 属性为false来关闭蒙版(即默认为true)。"),Object(b.b)("p",null,"蒙版会屏蔽底下东西的点击，锁定body窗口的滚动，让用户聚焦在Modal上。"),Object(b.b)("p",null,"通过 maskStyle, maskClassName 这两个属性自定义蒙版样式。"),Object(b.b)("br",null),Object(b.b)("h2",{id:"api"},"API"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"属性"),Object(b.b)("th",{parentName:"tr",align:null},"说明"),Object(b.b)("th",{parentName:"tr",align:null},"类型"),Object(b.b)("th",{parentName:"tr",align:null},"默认值"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"open"),Object(b.b)("td",{parentName:"tr",align:null},"开关Modal"),Object(b.b)("td",{parentName:"tr",align:null},"boolean"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"container"),Object(b.b)("td",{parentName:"tr",align:null},"放置容器"),Object(b.b)("td",{parentName:"tr",align:null},"HTMLElemengt"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"animationType"),Object(b.b)("td",{parentName:"tr",align:null},"消息项过渡动画"),Object(b.b)("td",{parentName:"tr",align:null},'"zoom" ',"|",' "blur" ',"|",' "clipRectSp" ',"|",' "clipRect" ',"|",' "clipCircle" ',"|",' "fade" ',"|",' "flip" ',"|",' "door" ',"|",' "slideUp" ',"|",' "slideDown" ',"|",' "slideRight" ',"|",' "slideLeft" ',"|",' "rotate" ',"|",' "zoom"'),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"animationDuration"),Object(b.b)("td",{parentName:"tr",align:null},"消息项动画持续时间(ms)"),Object(b.b)("td",{parentName:"tr",align:null},"number ","|"," { enter, leave }"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"clickToClose"),Object(b.b)("td",{parentName:"tr",align:null},"点击其他元素触发关闭"),Object(b.b)("td",{parentName:"tr",align:null},"false"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"escToClose"),Object(b.b)("td",{parentName:"tr",align:null},"按esc键触发关闭"),Object(b.b)("td",{parentName:"tr",align:null},"true"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"onClose"),Object(b.b)("td",{parentName:"tr",align:null},"触发关闭回调"),Object(b.b)("td",{parentName:"tr",align:null},"Function"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"wrapperClassName"),Object(b.b)("td",{parentName:"tr",align:null},"包裹容器class"),Object(b.b)("td",{parentName:"tr",align:null},"string"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"wrapperStyle"),Object(b.b)("td",{parentName:"tr",align:null},"包裹容器style"),Object(b.b)("td",{parentName:"tr",align:null},"CSSProperties"),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"showMask"),Object(b.b)("td",{parentName:"tr",align:null},"显示蒙版"),Object(b.b)("td",{parentName:"tr",align:null},"boolean"),Object(b.b)("td",{parentName:"tr",align:null},"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"maskClassName"),Object(b.b)("td",{parentName:"tr",align:null},"蒙版class\tstring"),Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null})),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"maskStyke"),Object(b.b)("td",{parentName:"tr",align:null},"蒙版style\tCSSProperties"),Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null})))))}void 0!==x&&x&&x===Object(x)&&Object.isExtensible(x)&&!x.hasOwnProperty("__filemeta")&&Object.defineProperty(x,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Modal/demos/index.cn.mdx"}}),x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-modal-demos-index-cn-mdx-052829d6dae572870ac3.js.map
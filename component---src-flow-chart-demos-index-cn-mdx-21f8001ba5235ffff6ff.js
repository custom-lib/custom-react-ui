(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{YIMK:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return u}));var a=t("k0FJ"),d=t("oedh"),o=(t("mXGw"),t("/FXl")),r=t("TjRS"),c=t("ZFoC"),l=t("gWUB"),b=(t("aD51"),["components"]),i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/FlowChart/demos/index.cn.mdx"}});var p={_frontmatter:i},s=r.a;function u(e){var n,t=e.components,u=Object(d.a)(e,b);return Object(o.b)(s,Object(a.a)({},p,u,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h4",{id:"简介"},"简介"),Object(o.b)("p",null,"纯粹html元素构建的自动布局的流程图，方便自定义节点和事件。"),Object(o.b)("h2",{id:"演示"},"演示"),Object(o.b)("p",null,"拖拽移动视图"),Object(o.b)(c.c,{__position:0,__code:"<Demo />",__scope:(n={props:u,DefaultLayout:r.a,Playground:c.c,Demo:l.a},n.DefaultLayout=r.a,n._frontmatter=i,n),mdxType:"Playground"},Object(o.b)(l.a,{mdxType:"Demo"})),Object(o.b)("br",null),Object(o.b)("h2",{id:"import-api"},"import API"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import FlowChart, { addNode, addBranch, expandBranch, combineNodes, deleteNode } from './FlowChart';\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"外部容器"},"外部容器"),Object(o.b)("p",null,"FlowChart容器占满外部容器， 需显式指定外部容器大小，并设置backgroundColor属性与外容器backgroundColor一致（掩盖连线）。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"<div style={{ backgroundColor: \"#f0f0f0\", width: 800, height: 800 }}>\n    <FlowChart backgroundColor='#f0f0f0' />\n</div>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"数据"},"数据"),Object(o.b)("p",null,"FlowChart的 data 属性接收节点数据。"),Object(o.b)("p",null,"data需为链表结构对象，data中的每个键值对代表一个节点，节点必须包含有id, next, pre这三个属性（头结点不能有pre, 尾节点不能有next）。节点任意添加自定义属性，会透传至组件。"),Object(o.b)("p",null,"必须通过headNodeId属性显示声明头结点。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const data = {\n    head: {\n        id: 'head',\n        next: ['aa'],\n        type: 'head',\n    },\n    aa:{\n        id: 'head',\n        next: ['tail'],\n        pre: ['head'],\n        type: 'head',\n    },\n    tail: {\n        id: 'tail',\n        pre: ['aa'],\n        type: 'tail',\n    }\n}\n\n<FlowChart\n    data={data}\n    headNodeId='head'\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"渲染节点rendernode"},"渲染节点(*RenderNode)"),Object(o.b)("p",null,"通过 RenderNode　属性(JSX.Element或者React组件)属性渲染节点。"),Object(o.b)("p",null,"也通过在节点自身属性中增加Render字段渲染节点，优先级更高。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const typeMap = {\n    head: <div style={{ width: 200, height: 100, background: 'black', color: \"#fff\" }}>{props.id}</div>\n    tail: (props) => <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n};\n\nconst initData = {\n    head: {\n        id: 'head',\n        next: ['tail'],\n        type: 'head',\n        Render: (props) => <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n    },\n    tail: {\n        id: 'tail',\n        pre: ['head'],\n        type: 'tail',\n    }\n}\n\nconst RenderNode = (props) => {\n    return typeMap[props.type](props);\n}\n\n<FlowChart\n    data={initData}\n    RenderNode={RenderNode}\n/>\n\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"配置设置"},"配置设置"),Object(o.b)("p",null,"通过config属性设置{ lineWidth: 连接线的宽度，lineColor:线的颜色, distance: { horizontal: 节点横向间隔，vertical: 节点纵向间隔}}, brotherNodeAlign(top | bottom | center): 不同高度情况下兄弟节点的对齐方式。} padding: { left, right, top, bottom(number) } 容器与流程图间"),Object(o.b)("p",null,"下面数值为默认值"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"<FlowChart\n    config={{\n        lineWidth: 2,\n        lineColor: '#000',\n        distance: { horizontal: 50, vertical: 40 },\n        padding: { top: 24, left: 36, right: 36, bottom: 24 },\n        brotherNodeAlign: 'center' // top bottom\n    }}\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"操作按钮"},"操作按钮"),Object(o.b)("p",null,"内置三种操作按钮(showAddButton, showBranchButton, showCombineButton, 默认全启用)"),Object(o.b)("p",null,"节点下方对应showAddButton;　分支上方的对应showBranchButton；分支下方的对应showCombineButton。置属性值为true/false启用/不启用"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"<FlowChart\n    showAddButton={true}\n    showBranchButton={true}\n    showCombineButton={true}\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"自定义操作按钮"},"自定义操作按钮"),Object(o.b)("p",null,"可以通过 (RenderAddButton, RenderBranchButton, RenderCombineButton) 属性 自定义渲染这三种操作按钮"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const RenderAddButton = (\n    <button>add</button>\n);\nconst RenderBranchButton = () => {\n    return (\n        <button>branch</button>\n    )\n};\nconst RenderMergeButton = (\n    <button>merge</button>\n);\n<FlowChart\n    RenderAddButton={RenderAddButton}\n    RenderBranchButton={RenderBranchButton}\n    RenderCombineButton={RenderMergeButton}\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"节点透传属性"},"节点透传属性"),Object(o.b)("p",null,"RenderNode节点中， 可以从props拿到以下属性"),Object(o.b)("p",null,"节点自身属性中除了(pre, next, Render)之外的所有属性，及id和自定义属性"),Object(o.b)("p",null,"触发操作回调的几种Action Function (onClickDeleteNode, onClickAddBranch, onClickAddNode, onClickAdd)"),Object(o.b)("p",null,"判断当前节点能否删除的canDelete(boolean)属性， 判断当前节点能否新增分支的canAddBranch(boolean)属性"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const typeMap = {\n    head: ({ onClickAddNode, onClickDeleteNode, onClickAddBranch, canDelete, canAddBranch, ...props }) => {\n        return (\n            <div style={{ width: 200, height: 100, background: 'black', color: \"#fff\" }}>\n                {props.id}\n                <button onClick={onClickAddNode}>addNode</button>\n                {canAddBranch && <button onClick={onClickAddBranch}>addBranch</button>}\n                {canDelete && <button onClick={onClickDeleteNode}>delete</button>}\n            </div>\n        )\n    },\n    tail: (props) => {\n        return (\n            <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n        )\n    },\n}\n\nconst RenderNode = (props) => {\n    return typeMap[props.type](props);\n}\n\n<FlowChart\n    RenderNode={RenderNode}\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"操作回调onchange"},"操作回调(onChange)"),Object(o.b)("p",null,"通过点击内置操作按钮，或者透传至节点的Action触发onChange"),Object(o.b)("p",null,"三种操作按钮对应回调type分别为'add'(target为所属节点id), 'expandBranch'(target为分支所属节点id), 'combineNodes'(target为对应分支的启示节点Id数组集合)"),Object(o.b)("p",null,"此外透传至节点的Action可触发以下type回调 onClickAdd->'add'(target为所属节点id), onClickAddNode->'addNode'(target为所属节点id)"),Object(o.b)("p",null,"onClickDeleteNode->'deleteNode'(target为所属节点id), , onClickAddBranch->'addBranch'(target为所属节点id)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"<FlowChart\n    onChange={({ type, target }) => {\n\n    }}\n/>\n")),Object(o.b)("br",null),Object(o.b)("h2",{id:"内置数据操作apiaddnode-addbranch-expandbranch-combinenodes-deletenode"},"内置数据操作API(addNode, addBranch, expandBranch, combineNodes, deleteNode)"),Object(o.b)("p",null,"提供内置的API用以生成正确的后续data。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import FlowChart, { addNode, addBranch, expandBranch, combineNodes, deleteNode } from './FlowChart';\nconst [data, setData] = useState(initData);\nconst onChange = useCallback(({ type, target }) => {\n    if (type === 'add') {\n        if (data[target].next.length === 1) {\n            if (Math.round(Math.random())) {\n                const newData = addNode(data, target, createNewNode());\n                setData(newData);\n            } else {\n                const newData = addBranch(data, target, [createNewNode(), createNewNode()]);\n                setData(newData);\n            }\n        } else {\n            const newData = addNode(data, target, createNewNode());\n            setData(newData);\n        }\n    } else if (type === 'expandBranch') {\n        const newData = expandBranch(data, target, [createNewNode()]);\n        setData(newData);\n    } else if (type === 'combineNodes') {\n        const newData = combineNodes(data, target, createNewNode());\n        setData(newData);\n    } else if (type === 'deleteNode') {\n        const newData = deleteNode(data, target);\n        setData(newData);\n    } else if (type === 'addBranch') {\n        const newData = addBranch(data, target, [createNewNode(), createNewNode()]);\n        setData(newData);\n    } else if (type === 'addNode') {\n            const newData = addNode(data, target, createNewNode());\n            setData(newData);   \n    }\n}, []);\nreturn (\n    <div className=\"flowchart-container\">\n        <FlowChart\n            onChange={onChange}\n            headNodeId= 'head'\n        />\n    </div>\n);\n")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/FlowChart/demos/index.cn.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-flow-chart-demos-index-cn-mdx-21f8001ba5235ffff6ff.js.map
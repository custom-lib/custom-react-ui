{"version":3,"sources":["webpack:///../src/Toast/demos/index.cn.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Toast","CustomContent","onClick","show","Content","duration","style","backgroundColor","color","setItemWrapperStyle","marginBottom","Math","floor","random","ItemWrapperStyle","setListStyle","top","transform","flexDirection","left","right","bottom","animationType","unique","preventDuplicate","maximum","queue","key","hide","setTimeout","hideAll","padding","showMask","setMaskStyle","setMaskClickHandler","isMDXComponent"],"mappings":"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","file":"component---src-toast-demos-index-cn-mdx-3b37f510077bfaac821b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Codes/custom-ui-old/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport Toast from \"../index\";\nimport CustomContent from \"./CustomContent\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h4 {...{\n      \"id\": \"简介\"\n    }}>{`简介`}</h4>\n    <p>{`以List和Mask为基础的消息条。`}</p>\n    <p>{`不需要写进render，可以通过js调用直接消息项。`}</p>\n    <p>{`虽然功能完善，支持自定义内容，可以实现Dialog、Modal等的效果，但是建议只作为错误、成功提示等轻量级交互来使用。`}</p>\n    <h2 {...{\n      \"id\": \"单例和多个实例\"\n    }}>{`单例和多个实例`}</h2>\n    <p>{`默认导入的Toast是个单例。`}</p>\n    <p>{`也支持生成另外的实例，用以封装成不同类型的Toast效果。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Toast from '../index';\n\nimport { ToastClass } from '../index';\n\nconst Toast2 = new ToastClass();\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"注册\"\n    }}>{`注册`}</h2>\n    <p>{`Toast需要个容器来渲染，应此提供了两种方式来注册容器(注册仅接受一次，第二次无效)。`}</p>\n    <p><strong parentName=\"p\">{`方式一: 函数式`}</strong></p>\n    <p>{`通过init函数注册，函数接受一个可选的参数HTMLElment作为容器。建议在App的入口处初始化。`}</p>\n    <p>{`如果未指定容器，将在body下自动创建一个id为toast-container的div HTMLElement作为容器。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Toast from '../index';\n\nconst contaner = document.querySelector(\"#xx\");\nToast.init(container);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`方式二： 组件式`}</strong></p>\n    <p>{`如果你需要对Toast注入i18n、主题配置、Redux Store等东西，也可以通过Toast.Provider组件式的方式注册。`}</p>\n    <p>{`Toast.Provider接受一个可选的container属性指定容器，如果没有，也将自动创建，规则如方式一所述。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport Toast from '../index';\n\nconst contaner = document.querySelector(\"#xx\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <IntlProvider>\n            <Toast.Provider container={contaner}/>\n            <App />\n        </IntlProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`但是显式手动注册容器并不是必须的。如果仅把Toast用作单一语言的轻量级提示，可以不用注册容器直接使用API。`}</strong></p>\n    <p>{`Toast内部会在第一次调用API时候自动按方式一所述规则创建容器。`}</p>\n    <br />\n    <h2 {...{\n      \"id\": \"基础用法---内容与持续时间\"\n    }}>{`基础用法 - 内容与持续时间`}</h2>\n    <p>{`通过 Toast.show 生成一个消息项。`}</p>\n    <p>{`Toast.show接受一个对象作为参数，Content是唯一的必填属性，表示消息项的内容。`}</p>\n    <p>{`Content属性可以是简单的数字和字符串， 这时候消息项的样式是内置的黑底白字风格。`}</p>\n    <p>{`Content属性也可以接受自定义的JSX.Element或者React组件。`}</p>\n    <p>{`通过设置参数中的 duration 属性控制该消息项的持续时间(ms)， 不填为默认 3000。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n\nexport const CustomContent = () => {\n    return <div style={{ width:200, height:100, backgroundColor:'yellow' }}>这是一个React组件</div>\n}\n`}</code></pre>\n    <Playground __position={2} __code={'<button onClick={() => Toast.show({ Content: 123456, duration: 1000 })}>\\n  数字\\n</button>\\n<button onClick={() => Toast.show({ Content: \\'这是一个消息项\\' })}>\\n  字符\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: (\\n        <div style={{ backgroundColor: \\'red\\', color: \\'white\\' }}>\\n          这是一个jsx元素\\n        </div>\\n      ),\\n      duration: 3000,\\n    })\\n  }\\n>\\n  jsx元素\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: CustomContent,\\n      duration: 4000,\\n    })\\n  }\\n>\\n  React组件\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: 123456,\n        duration: 1000\n      })}>\n        数字\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项'\n      })}>\n        字符\n    </button>\n    <button onClick={() => Toast.show({\n        Content: <div style={{\n          backgroundColor: 'red',\n          color: 'white'\n        }}>这是一个jsx元素</div>,\n        duration: 3000\n      })}>\n        jsx元素\n    </button>\n    <button onClick={() => Toast.show({\n        Content: CustomContent,\n        duration: 4000\n      })}>\n        React组件\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"自定义消息项容器样式\"\n    }}>{`自定义消息项容器样式`}</h2>\n    <p>{`为了实现动画效果，每个消息项外都有一层不可见容器，默认为这个容器设置了 margin-button: 12px。`}</p>\n    <p>{`请注意不要给自定义内容的消息项设置margin, 这么做会撑开容器， 如下的p元素。`}</p>\n    <p>{`如果对于这个距离不满意，或者想附加其他的样式(虽然我不知道为什么要这么做)。`}</p>\n    <p>{`可以通过在show的参数中添加 ItemWrapperStyle, ItemWrapperClassName 属性来自定义该消息项的容器样式。`}</p>\n    <p>{`也可以通过另外的API setItemWrapperStyle 和 setItemWrapperClassName 全局设置当前Toast实例下每个消息项容器的样式(当然优先级没有show参数中添加的高)。`}</p>\n    <p>{`请注意这两个API的改变是持久性的、全局的，当前Toast实例下后续所有消息项都将应用修改，当然也可以空参再次调用这两个API进行重置。`}</p>\n    <Playground __position={4} __code={'<button\\n  onClick={() => {\\n    Toast.setItemWrapperStyle({\\n      marginBottom: Math.floor(Math.random() * (120 - 12 + 1) + 12),\\n    })\\n    Toast.show({\\n      Content: \\'这是一个消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  随机设置全局间距12-120\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setItemWrapperStyle()\\n    Toast.show({\\n      Content: \\'这是一个消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  恢复默认间距-12\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: \\'这是一个消息项\\',\\n      duration: 3000,\\n      ItemWrapperStyle: { marginBottom: 24 },\\n    })\\n  }\\n>\\n  自定义间距24\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: (\\n        <div style={{ backgroundColor: \\'red\\', color: \\'white\\' }}>\\n          这是一个jsx div元素\\n        </div>\\n      ),\\n      duration: 3000,\\n      ItemWrapperStyle: { marginBottom: 36 },\\n    })\\n  }\\n>\\n  jsx div元素 - 自定义间距36\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: (\\n        <p style={{ backgroundColor: \\'red\\', color: \\'white\\' }}>\\n          这是一个jsx p元素\\n        </p>\\n      ),\\n      duration: 3000,\\n      ItemWrapperStyle: { marginBottom: 36 },\\n    })\\n  }\\n>\\n  jsx p元素 - 自定义间距36\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => {\n        Toast.setItemWrapperStyle({\n          marginBottom: Math.floor(Math.random() * (120 - 12 + 1) + 12)\n        });\n        Toast.show({\n          Content: '这是一个消息项',\n          duration: 3000\n        });\n      }}>\n        随机设置全局间距12-120\n    </button>\n    <button onClick={() => {\n        Toast.setItemWrapperStyle();\n        Toast.show({\n          Content: '这是一个消息项',\n          duration: 3000\n        });\n      }}>\n        恢复默认间距-12\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        duration: 3000,\n        ItemWrapperStyle: {\n          marginBottom: 24\n        }\n      })}>\n        自定义间距24\n    </button>\n    <button onClick={() => Toast.show({\n        Content: <div style={{\n          backgroundColor: 'red',\n          color: 'white'\n        }}>这是一个jsx div元素</div>,\n        duration: 3000,\n        ItemWrapperStyle: {\n          marginBottom: 36\n        }\n      })}>\n        jsx div元素 - 自定义间距36\n    </button>\n    <button onClick={() => Toast.show({\n        Content: <p style={{\n          backgroundColor: 'red',\n          color: 'white'\n        }}>这是一个jsx p元素</p>,\n        duration: 3000,\n        ItemWrapperStyle: {\n          marginBottom: 36\n        }\n      })}>\n        jsx p元素 - 自定义间距36\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"自定义消息列表样式\"\n    }}>{`自定义消息列表样式`}</h2>\n    <p>{`默认情况下，消息列表居于屏幕中间，离顶部30%处。其样式如下。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const ToastList = styled(List)\\`\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: fit-content;\n    left: 50%;\n    top: 30%;\n    transform: translateX(-50%);\n    z-index: 200;\n    pointer-events: none;\n\\` as typeof List;\n`}</code></pre>\n    <p>{`可以通过 setListStyle, setListClassName 这两个API修改当前Toast实例下消息列表样式。(也是持久性的、全局的)`}</p>\n    <Playground __position={6} __code={'<button\\n  onClick={() => {\\n    Toast.setListStyle()\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  固定居中弹出(默认)\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setListStyle({ top: \\'50%\\', transform: \\'translate(-50%, -50%)\\' })\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  自动居中弹出\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setListStyle({ top: \\'24px\\' })\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  上方正弹(新的在上)\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setListStyle({ top: \\'24px\\', flexDirection: \\'column-reverse\\' })\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  上方反弹(新的在下)\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setListStyle({\\n      top: \\'unset\\',\\n      left: \\'unset\\',\\n      transform: \\'unset\\',\\n      right: \\'12px\\',\\n      bottom: \\'24px\\',\\n    })\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  右下正弹(新的在上)\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setListStyle({\\n      top: \\'unset\\',\\n      left: \\'unset\\',\\n      transform: \\'unset\\',\\n      right: \\'12px\\',\\n      bottom: \\'24px\\',\\n      flexDirection: \\'column-reverse\\',\\n    })\\n    Toast.show({\\n      Content: \\'这是一条消息项\\',\\n      duration: 3000,\\n    })\\n  }}\\n>\\n  右下反弹(新的在下)\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => {\n        Toast.setListStyle();\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        固定居中弹出(默认)\n    </button>\n    <button onClick={() => {\n        Toast.setListStyle({\n          top: '50%',\n          transform: 'translate(-50%, -50%)'\n        });\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        自动居中弹出\n    </button>\n    <button onClick={() => {\n        Toast.setListStyle({\n          top: '24px'\n        });\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        上方正弹(新的在上)\n    </button>\n    <button onClick={() => {\n        Toast.setListStyle({\n          top: '24px',\n          flexDirection: 'column-reverse'\n        });\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        上方反弹(新的在下)\n    </button>\n    <button onClick={() => {\n        Toast.setListStyle({\n          top: 'unset',\n          left: 'unset',\n          transform: 'unset',\n          right: '12px',\n          bottom: '24px'\n        });\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        右下正弹(新的在上)\n    </button>\n    <button onClick={() => {\n        Toast.setListStyle({\n          top: 'unset',\n          left: 'unset',\n          transform: 'unset',\n          right: '12px',\n          bottom: '24px',\n          flexDirection: 'column-reverse'\n        });\n        Toast.show({\n          Content: '这是一条消息项',\n          duration: 3000\n        });\n      }}>\n        右下反弹(新的在下)\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"自定义进出场动画\"\n    }}>{`自定义进出场动画`}</h2>\n    <p>{`可以通过设置show的参数中的 animationType 属性改变进出场动画。`}</p>\n    <p>{`animationType 可为 \"zoom\" | \"blur\" | \"clipRectSp\" | \"clipRect\" | \"clipCircle\" | \"fade\" | \"flip\" | \"door\" | \"slideUp\" | \"slideDown\" | \"slideRight\" | \"slideLeft\" | \"rotate\"　设置进出场动画。`}</p>\n    <p>{`通过设置 animationDuration 属性(ms)，修改进出场动画持续时间。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type animationDuration = number | { enter: number, leave: number }\n`}</code></pre>\n    <Playground __position={8} __code={'<button onClick={() => Toast.show({ Content: \\'这是一个消息项\\' })}>\\n  zoom(默认)\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'door\\' })\\n  }\\n>\\n  door\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'fade\\' })\\n  }\\n>\\n  fade\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'flip\\' })\\n  }\\n>\\n  flip\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'rotate\\' })\\n  }\\n>\\n  rotate\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'slideDown\\' })\\n  }\\n>\\n  slideDown\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'slideUp\\' })\\n  }\\n>\\n  slideUp\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'slideLeft\\' })\\n  }\\n>\\n  slideLeft\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'slideRight\\' })\\n  }\\n>\\n  slideRight\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'blur\\' })\\n  }\\n>\\n  blur\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'clipCircle\\' })\\n  }\\n>\\n  clipCircle\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'clipRect\\' })\\n  }\\n>\\n  clipRect\\n</button>\\n<button\\n  onClick={() =>\\n    Toast.show({ Content: \\'这是一个消息项\\', animationType: \\'clipRectSp\\' })\\n  }\\n>\\n  clipRectSp\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项'\n      })}>\n        zoom(默认)\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'door'\n      })}>\n        door\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'fade'\n      })}>\n        fade\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'flip'\n      })}>\n        flip\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'rotate'\n      })}>\n        rotate\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'slideDown'\n      })}>\n        slideDown\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'slideUp'\n      })}>\n        slideUp\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'slideLeft'\n      })}>\n        slideLeft\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'slideRight'\n      })}>\n        slideRight\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'blur'\n      })}>\n        blur\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'clipCircle'\n      })}>\n        clipCircle\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'clipRect'\n      })}>\n        clipRect\n    </button>\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        animationType: 'clipRectSp'\n      })}>\n        clipRectSp\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"唯一\"\n    }}>{`唯一`}</h2>\n    <p>{`通过设置 show 参数中的 unique 属性为 true，使得该消息项唯一(及如果存在其他消息项，哪怕还在持续时间内也会销毁)。`}</p>\n    <Playground __position={10} __code={'<button\\n  onClick={() => Toast.show({ Content: \\'这是一个消息项\\', unique: true })}\\n>\\n  唯一\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: '这是一个消息项',\n        unique: true\n      })}>唯一</button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"防重复\"\n    }}>{`防重复`}</h2>\n    <p>{`通过设置 show 参数中的 preventDuplicate 属性为 true，防止消息项重复。`}</p>\n    <p>{`生成消息项时会对Content内容进行一次浅比较检测。`}</p>\n    <Playground __position={12} __code={'<button\\n  onClick={() => Toast.show({ Content: \\'防重复1\\', preventDuplicate: true })}\\n>\\n  防重复1\\n</button>\\n<button\\n  onClick={() => Toast.show({ Content: 123456, preventDuplicate: true })}\\n>\\n  防重复2\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: '防重复1',\n        preventDuplicate: true\n      })}>防重复1</button>\n    <button onClick={() => Toast.show({\n        Content: 123456,\n        preventDuplicate: true\n      })}>防重复2</button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"最大数量\"\n    }}>{`最大数量`}</h2>\n    <p>{`通过设置 show 参数中的 maximum 限制最大消息项数量。消息项数量大于该值时，早生成的将被销毁。`}</p>\n    <Playground __position={14} __code={'<button onClick={() => Toast.show({ Content: `最多3个`, maximum: 3 })}>\\n  最大数量3\\n</button>\\n<button onClick={() => Toast.show({ Content: `最多4个`, maximum: 4 })}>\\n  最大数量4\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: `最多3个`,\n        maximum: 3\n      })}>最大数量3</button>\n    <button onClick={() => Toast.show({\n        Content: `最多4个`,\n        maximum: 4\n      })}>最大数量4</button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"消息队列\"\n    }}>{`消息队列`}</h2>\n    <p>{`通过设置 show 参数中的 queue 属性为 true， 将本次消息项加入消息队列。`}</p>\n    <p>{`消息队列中的头部消息项，将在消息列表中的消息项为空时自动渲染。`}</p>\n    <Playground __position={16} __code={'<button\\n  onClick={() => Toast.show({ Content: `消息队列中的消息项`, queue: true })}\\n>\\n  消息队列\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: `消息队列中的消息项`,\n        queue: true\n      })}>消息队列</button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"永久显示和手动关闭\"\n    }}>{`永久显示和手动关闭`}</h2>\n    <p>{`通过设置 show 参数中的 duration 为 0 时，消息项将不会自动销毁。`}</p>\n    <p>{`而 show API 的调用将会返回一个key值标识当前消息项， 当然也可以在 show 的参数中设置 key 属性(number | string)手动赋予该标识(key相同时消息项不会重复生成)。`}</p>\n    <p>{`然后调用另外两个API -- hide(key: string | number), hideAll() 来手动关闭消息项。`}</p>\n    <p>{`hideAll API 会把消息队列中的消息项也一并清空。`}</p>\n    <Playground __position={18} __code={'<button\\n  onClick={() =>\\n    Toast.show({ Content: `key=\\'1314\\'`, key: \\'1314\\', duration: 0 })\\n  }\\n>\\n  key=\\'1234\\'\\n</button>\\n<button onClick={() => Toast.hide(\\'1314\\')}>销毁key=\\'1314\\'</button>\\n<button\\n  onClick={() => {\\n    const key = Toast.show({ Content: `key自动生成` })\\n    setTimeout(() => Toast.hide(key), 10000)\\n  }}\\n>\\n  key自动生成\\n</button>\\n<button onClick={() => Toast.hideAll()}>销毁所有</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: `key='1314'`,\n        key: '1314',\n        duration: 0\n      })}>key='1234'</button>\n    <button onClick={() => Toast.hide('1314')}>销毁key='1314'</button>\n    <button onClick={() => {\n        const key = Toast.show({\n          Content: `key自动生成`\n        });\n        setTimeout(() => Toast.hide(key), 10000);\n      }}>\n        key自动生成\n    </button>\n    <button onClick={() => Toast.hideAll()}>销毁所有</button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"销毁回调\"\n    }}>{`销毁回调`}</h2>\n    <p>{`通过 show 参数中的 onClose 参数，设置消息项销毁的回调函数。`}</p>\n    <br />\n    <h2 {...{\n      \"id\": \"蒙版\"\n    }}>{`蒙版`}</h2>\n    <p>{`有了永久显示和手动关闭，现在距离Modal差的，就是蒙版了。`}</p>\n    <p>{`尽管提供了功能，但是非常不建议把Toast用在这么重的交互上。`}</p>\n    <p>{`如果非要这么做，在 show API的参数中设置 showMask 属性为true即可开启蒙版。`}</p>\n    <p>{`蒙版会屏蔽底下东西的点击，阻止body窗口的滚动，让用户聚焦在消息项上。`}</p>\n    <p>{`当所有带 showMask 的消息项销毁时，蒙版才会销毁。`}</p>\n    <Playground __position={21} __code={'<button\\n  onClick={() =>\\n    Toast.show({\\n      Content: (\\n        <div style={{ padding: 24, backgroundColor: \\'#fff\\' }}>\\n          <button onClick={() => Toast.hide(\\'mask\\')}>点击销毁该消息项</button>\\n          <button\\n            onClick={() => Toast.show({ Content: \\'这是一个持续3秒的消息项\\' })}\\n          >\\n            点击生成持续3秒的消息项\\n          </button>\\n        </div>\\n      ),\\n      showMask: true,\\n      key: \\'mask\\',\\n      duration: 0,\\n    })\\n  }\\n>\\n  带蒙版的消息项\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => Toast.show({\n        Content: <div style={{\n          padding: 24,\n          backgroundColor: '#fff'\n        }}>\n                    <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n                    <button onClick={() => Toast.show({\n            Content: '这是一个持续3秒的消息项'\n          })}>点击生成持续3秒的消息项</button>\n                </div>,\n        showMask: true,\n        key: 'mask',\n        duration: 0\n      })}>\n        带蒙版的消息项\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"自定义蒙版样式\"\n    }}>{`自定义蒙版样式`}</h2>\n    <p>{`现在画风越来越奇怪了。`}</p>\n    <p>{`甚至可以通过 setMaskStyle, setMaskClassName 这两个API修改当前Toast实例下属蒙版样式。(当然也是持久性的)`}</p>\n    <Playground __position={23} __code={'<button\\n  onClick={() => {\\n    Toast.setMaskStyle({ backgroundColor: \\'green\\' })\\n    Toast.show({\\n      Content: `改变蒙版背景色-绿`,\\n      duration: 3000,\\n      showMask: true,\\n    })\\n  }}\\n>\\n  改变蒙版背景色-绿\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setMaskStyle({ backgroundColor: \\'red\\' })\\n    Toast.show({\\n      Content: `改变蒙版背景色-红`,\\n      duration: 3000,\\n      showMask: true,\\n    })\\n  }}\\n>\\n  改变蒙版背景色-红\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setMaskStyle()\\n    Toast.show({\\n      Content: `改变蒙版背景色-默认`,\\n      duration: 3000,\\n      showMask: true,\\n    })\\n  }}\\n>\\n  改变蒙版背景色-默认\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => {\n        Toast.setMaskStyle({\n          backgroundColor: 'green'\n        });\n        Toast.show({\n          Content: `改变蒙版背景色-绿`,\n          duration: 3000,\n          showMask: true\n        });\n      }}>\n        改变蒙版背景色-绿\n    </button>\n    <button onClick={() => {\n        Toast.setMaskStyle({\n          backgroundColor: 'red'\n        });\n        Toast.show({\n          Content: `改变蒙版背景色-红`,\n          duration: 3000,\n          showMask: true\n        });\n      }}>\n        改变蒙版背景色-红\n    </button>\n    <button onClick={() => {\n        Toast.setMaskStyle();\n        Toast.show({\n          Content: `改变蒙版背景色-默认`,\n          duration: 3000,\n          showMask: true\n        });\n      }}>\n        改变蒙版背景色-默认\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"设置蒙版点击事件\"\n    }}>{`设置蒙版点击事件`}</h2>\n    <p>{`其实离真正的Modal还差了个东西 -- 那就是点击蒙版关闭提示。`}</p>\n    <p>{`因为消息项不像Modal一般同时只有一个，不可能内置点击蒙版把全部消息项销毁，所以把选择权移交了出来。`}</p>\n    <p>{`通过 setMaskClickHandler 这个API修改当前Toast实例下属蒙版click handler。(当然也是持久性的， 如果当前Toast实例存在多种情况复用，记得用完重置clickHandler)`}</p>\n    <Playground __position={25} __code={'<button\\n  onClick={() => {\\n    Toast.setMaskClickHandler(() => {\\n      Toast.hideAll()\\n      Toast.setMaskClickHandler()\\n    })\\n    Toast.show({\\n      Content: (\\n        <div style={{ padding: 24, backgroundColor: \\'#fff\\' }}>\\n          <button onClick={() => Toast.hide(\\'mask\\')}>点击销毁该消息项</button>\\n          <button\\n            onClick={() =>\\n              Toast.show({\\n                Content: \\'这是一个持续10秒的消息项\\',\\n                duration: 10000,\\n              })\\n            }\\n          >\\n            点击生成持续10秒的消息项\\n          </button>\\n          点击蒙版销毁全部存在的消息项\\n        </div>\\n      ),\\n      showMask: true,\\n      key: \\'mask\\',\\n      duration: 0,\\n    })\\n  }}\\n>\\n  点击蒙版销毁全部消息项目\\n</button>\\n<button\\n  onClick={() => {\\n    Toast.setMaskClickHandler(() => {\\n      Toast.hide(\\'mask\\')\\n      Toast.setMaskClickHandler()\\n    })\\n    Toast.show({\\n      Content: (\\n        <div style={{ padding: 24, backgroundColor: \\'#fff\\' }}>\\n          <button onClick={() => Toast.hide(\\'mask\\')}>点击销毁该消息项</button>\\n          <button\\n            onClick={() =>\\n              Toast.show({\\n                Content: \\'这是一个持续10秒的消息项\\',\\n                duration: 10000,\\n              })\\n            }\\n          >\\n            点击生成持续10秒的消息项\\n          </button>\\n          点击蒙版单独销毁伪Modal消息项\\n        </div>\\n      ),\\n      showMask: true,\\n      key: \\'mask\\',\\n      duration: 0,\\n    })\\n  }}\\n>\\n  点击蒙版单独销毁伪Modal消息项\\n</button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toast,\n      CustomContent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <button onClick={() => {\n        Toast.setMaskClickHandler(() => {\n          Toast.hideAll();\n          Toast.setMaskClickHandler();\n        });\n        Toast.show({\n          Content: <div style={{\n            padding: 24,\n            backgroundColor: '#fff'\n          }}>\n                        <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n                        <button onClick={() => Toast.show({\n              Content: '这是一个持续10秒的消息项',\n              duration: 10000\n            })}>点击生成持续10秒的消息项</button>\n                        点击蒙版销毁全部存在的消息项\n                    </div>,\n          showMask: true,\n          key: 'mask',\n          duration: 0\n        });\n      }}>\n        点击蒙版销毁全部消息项目\n    </button>\n    <button onClick={() => {\n        Toast.setMaskClickHandler(() => {\n          Toast.hide('mask');\n          Toast.setMaskClickHandler();\n        });\n        Toast.show({\n          Content: <div style={{\n            padding: 24,\n            backgroundColor: '#fff'\n          }}>\n                        <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n                        <button onClick={() => Toast.show({\n              Content: '这是一个持续10秒的消息项',\n              duration: 10000\n            })}>点击生成持续10秒的消息项</button>\n                        点击蒙版单独销毁伪Modal消息项\n                    </div>,\n          showMask: true,\n          key: 'mask',\n          duration: 0\n        });\n      }}>\n        点击蒙版单独销毁伪Modal消息项\n    </button>\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`组件提供了一些静态方法，使用方式和参数如下：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.init(container?: HTMLElement) -- 用于函数调用式初始化容器`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.Provider -- 用于组件调用式初始化容器`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.show(config: Object): string | number -- 用于生成一个消息项，返回标识消息项的key，用以手动hide`}</p>\n      </li>\n    </ul>\n    <p>{`config对象的可选属性如下`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`属性`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`说明`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`*Content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项内容(必填)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`合法的ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项标识`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`duration`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项持续时间(ms)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`3000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`preventDuplicate`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`防重复`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`unique`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`唯一`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`queue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`加入消息队列`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`最大消息项数量`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`showMask`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`显示蒙版`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`animationType`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项过渡动画`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"zoom\" `}{`|`}{` \"blur\" `}{`|`}{` \"clipRectSp\" `}{`|`}{` \"clipRect\" `}{`|`}{` \"clipCircle\" `}{`|`}{` \"fade\" `}{`|`}{` \"flip\" `}{`|`}{` \"door\" `}{`|`}{` \"slideUp\" `}{`|`}{` \"slideDown\" `}{`|`}{` \"slideRight\" `}{`|`}{` \"slideLeft\" `}{`|`}{` \"rotate\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"zoom\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`animationDuration`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项动画持续时间(ms)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number `}{`|`}{` { enter, leave }`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`消息项销毁回调`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.hide(key: string | number) -- 手动销毁key值对应的消息项`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.hideAll() -- 手动销毁所有消息项`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.setMaskStyle(style?: CSSProperties), Toast.setMaskClassName(className?: string) -- 全局设置当前Toast实例下属蒙版样式`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.setMaskClickHandler(handler?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void)) -- 全局设置当前Toast实例下属蒙版响应点击函数`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.setListStyle(style?: CSSProperties), Toast.setListClassName(className?: string) -- 全局设置当前Toast实例下属消息列表样式`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Toast.setItemWrapperStyle(style?: CSSProperties), Toast.setItemWrapperClassName(className?: string) -- 全局设置当前Toast实例下属消息项容器样式`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
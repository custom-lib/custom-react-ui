(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{GiMh:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return u})),n.d(e,"default",(function(){return y}));var a=n("k0FJ"),r=n("oedh"),o=(n("mXGw"),n("/FXl")),i=n("TjRS"),l=n("ZFoC"),m=n("1Yji"),s=n("8NCC"),b=n("XjHh"),c=n("MCKd"),d=n("yffm"),p=(n("aD51"),["components"]),u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/List/demos/index.cn.mdx"}});var g={_frontmatter:u},j=i.a;function y(t){var e,n,y,O,f=t.components,h=Object(r.a)(t,p);return Object(o.b)(j,Object(a.a)({},g,h,{components:f,mdxType:"MDXLayout"}),Object(o.b)("h4",{id:"简介"},"简介"),Object(o.b)("p",null,"带有进出场动画的列表"),Object(o.b)("h2",{id:"基础用法----list-和-children"},"基础用法 -- list 和 children"),Object(o.b)("p",null,"List组件要求一个包含key关键字的对象数组作为数据源， 作为 list 属性的值。"),Object(o.b)("p",null,"同时提供一个返回合法JSX.Element的render function(渲染函数)作为children，function中的第一个参数是list中item的值。"),Object(o.b)("p",null,"这里之所以选择用render function + list 属性这种形式，返回一个和本身的item数据没有任何变化的回调参数，而不是采用map出ReactNode的方式，是考虑到这样做可以有更为严格合理的ts类型限制。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst ListItem = styled.div<{ bgColor: string }>`\n    width: 200px;\n    height: 60px;\n    background-color: ${({ bgColor }) => bgColor};\n    margin-top: 12px;\n`;\n\nconst BasicDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n    \n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list}>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </List>\n        </div>\n    )\n}\n")),Object(o.b)(l.c,{__position:0,__code:"<BasicDemo />",__scope:(e={props:h,DefaultLayout:i.a,Playground:l.c,List:m.a,BasicDemo:s.a,TransitionAnimationDemo:b.a,AnimatedHeightDemo:c.a,WrapperStyleDemo:d.a},e.DefaultLayout=i.a,e._frontmatter=u,e),mdxType:"Playground"},Object(o.b)(s.a,{mdxType:"BasicDemo"})),Object(o.b)("br",null),Object(o.b)("h2",{id:"进出场动画和动画持续时间"},"进出场动画和动画持续时间"),Object(o.b)("p",null,'通过设置 animationType 为 "zoom" | "blur" | "clipRectSp" | "clipRect" | "clipCircle" | "fade" | "flip" | "door" | "slideUp" | "slideDown" | "slideRight" | "slideLeft" | "rotate"　设置进出场动画。'),Object(o.b)("p",null,'默认为 "zoom"。'),Object(o.b)("p",null,"通过设置 animationDuration　属性(ms)，修改弹框进出场动画持续时间。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"type animationDuration = number | { enter: number, leave: number }\n")),Object(o.b)("p",null,"这两个属性可以做为List的属性应用在每个列表项，也可以作为列表项自身的属性（优先级更高）。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst ListItem = styled.div<{ bgColor: string }>`\n    width: 200px;\n    height: 60px;\n    background-color: ${({ bgColor }) => bgColor};\n    margin-top: 12px;\n`;\n\nconst TransitionAnimationDemo = () => {\n    const [list, setList] = useState<Item[]>([]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: (key - 1) % 2 === 0 ? '#' + Math.random().toString(16).substr(2, 6).toUpperCase() : 'red',\n                animationType: (key - 1) % 2 === 0 ? 'slideLeft' : undefined,\n                animationDuration: (key - 1) % 2 === 0 ? { enter: 600, leave: 1000 } : undefined\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list} animationType='door' animationDuration={300}>\n                {item => <ListItem bgColor={item.bgColor}>{item.animationType ? '组件自身动画' : '列表全局动画'}</ListItem>}\n            </List>\n        </div>\n    )\n}\n")),Object(o.b)(l.c,{__position:2,__code:"<TransitionAnimationDemo />",__scope:(n={props:h,DefaultLayout:i.a,Playground:l.c,List:m.a,BasicDemo:s.a,TransitionAnimationDemo:b.a,AnimatedHeightDemo:c.a,WrapperStyleDemo:d.a},n.DefaultLayout=i.a,n._frontmatter=u,n),mdxType:"Playground"},Object(o.b)(b.a,{mdxType:"TransitionAnimationDemo"})),Object(o.b)("br",null),Object(o.b)("h2",{id:"高度变化动画"},"高度变化动画"),Object(o.b)("p",null,"通过设置 List 的 animatedHeight 属性为 true 开启进出场高度变化动画。"),Object(o.b)("p",null,"开启高度变化动画会在 List Item 外额外附着一层容器div元素。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useCallback, forwardRef } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\ninterface Item extends ItemProps {\n    bgColor?: string;\n}\nlet key = 0;\nconst ListItem = styled.div<{ bgColor?: string }>`\n    width: 200px;\n    height: 60px;\n    background-color: ${({ bgColor }) => bgColor || 'black'};\n    margin-top: 12px;\n`;\nconst AnimatedHeightDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n            })\n            return newList;\n        });\n    }, []);\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list} animatedHeight>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </List>\n        </div>\n    )\n}\n")),Object(o.b)(l.c,{__position:4,__code:"<AnimatedHeightDemo />",__scope:(y={props:h,DefaultLayout:i.a,Playground:l.c,List:m.a,BasicDemo:s.a,TransitionAnimationDemo:b.a,AnimatedHeightDemo:c.a,WrapperStyleDemo:d.a},y.DefaultLayout=i.a,y._frontmatter=u,y),mdxType:"Playground"},Object(o.b)(c.a,{mdxType:"AnimatedHeightDemo"})),Object(o.b)("br",null),Object(o.b)("h2",{id:"列表项容器样式与泛型阻断"},"列表项容器样式与泛型阻断"),Object(o.b)("p",null,"每个列表项Item外层有一个内置的容器用于动画变化。"),Object(o.b)("p",null,"容器不带任何样式，一般情况下不用管这个容器。如果你想为Iem设置margin边距，Item的margin属性也会重叠在容器上。"),Object(o.b)("p",null,"但是如果当你改变Item为BFC时，比如当设置List本身的display为flex时，或者将Item改为inline类型时，margin的重叠现象不再生效。"),Object(o.b)("p",null,"这时候可以通过ItemWrapperStyle, ItemWrapperClassName属性给Item容器设置margin。"),Object(o.b)("p",null,"同样的，这两个属性可以做为List的属性应用在每个列表项，也可以作为列表项自身的属性（优先级更高）。"),Object(o.b)("p",null,"如果用styled-compoennts styled List组件, 组件的泛型输入会被阻断， render function中的类型变为any， 此时可以用 as typeof List 简单地强制声明。"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst StyledList = styled(List)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n` as typeof List;\n\n\nconst ListItem = styled.div<{ bgColor: string }>`\n    width: 200px;\n    height: 60px;\n    background-color: ${({ bgColor }) => bgColor};\n`;\n\nconst WrapperStyleDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n                ItemWrapperStyle: (key - 1) % 2 === 0 ? { marginBottom: 36 } : undefined\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <StyledList list={list} animatedHeight ItemWrapperStyle={{ marginBottom: 12 }}>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </StyledList>\n        </div>\n    )\n}\n")),Object(o.b)(l.c,{__position:6,__code:"<WrapperStyleDemo />",__scope:(O={props:h,DefaultLayout:i.a,Playground:l.c,List:m.a,BasicDemo:s.a,TransitionAnimationDemo:b.a,AnimatedHeightDemo:c.a,WrapperStyleDemo:d.a},O.DefaultLayout=i.a,O._frontmatter=u,O),mdxType:"Playground"},Object(o.b)(d.a,{mdxType:"WrapperStyleDemo"})),Object(o.b)("br",null),Object(o.b)("h2",{id:"其他任意原生html属性事件"},"其他任意原生html属性、事件"),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"属性"),Object(o.b)("th",{parentName:"tr",align:null},"说明"),Object(o.b)("th",{parentName:"tr",align:null},"类型"),Object(o.b)("th",{parentName:"tr",align:null},"默认值"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"list"),Object(o.b)("td",{parentName:"tr",align:null},"数据源"),Object(o.b)("td",{parentName:"tr",align:null},"Array of item extends { key: number ","|"," string, duration?: , animationType?: }"),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"children"),Object(o.b)("td",{parentName:"tr",align:null},"渲染函数"),Object(o.b)("td",{parentName:"tr",align:null},"(item, ref) => ReactNode"),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"animationType"),Object(o.b)("td",{parentName:"tr",align:null},"过渡动画"),Object(o.b)("td",{parentName:"tr",align:null},'"zoom" ',"|",' "blur" ',"|",' "clipRectSp" ',"|",' "clipRect" ',"|",' "clipCircle" ',"|",' "fade" ',"|",' "flip" ',"|",' "door" ',"|",' "slideUp" ',"|",' "slideDown" ',"|",' "slideRight" ',"|",' "slideLeft" ',"|",' "rotate"'),Object(o.b)("td",{parentName:"tr",align:null},'"zoom"')),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"animationDuration"),Object(o.b)("td",{parentName:"tr",align:null},"动画持续时间(ms)"),Object(o.b)("td",{parentName:"tr",align:null},"number ","|"," { enter, leave }"),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ItemWrapperClassName"),Object(o.b)("td",{parentName:"tr",align:null},"列表项容器class"),Object(o.b)("td",{parentName:"tr",align:null},"string"),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ItemWrapperStyle"),Object(o.b)("td",{parentName:"tr",align:null},"列表项容器style"),Object(o.b)("td",{parentName:"tr",align:null},"React.CSSProperties"),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"其他"),Object(o.b)("td",{parentName:"tr",align:null},"html属性"),Object(o.b)("td",{parentName:"tr",align:null},"如 class, style, onClick 等"),Object(o.b)("td",{parentName:"tr",align:null})))))}void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!y.hasOwnProperty("__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/List/demos/index.cn.mdx"}}),y.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-list-demos-index-cn-mdx-76690e1995253576f201.js.map
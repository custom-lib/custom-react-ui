{"version":3,"sources":["webpack:///../src/FlowChart/demos/index.cn.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Demo","parentName","isMDXComponent"],"mappings":"4SAUaA,EAAe,Q,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,MADR,MAGA,wDACA,kBACE,GAAM,MADR,MAGA,+BACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,WAAYC,SAAO,GACpDJ,QACAH,kBACAQ,eACAC,UAJoD,gBAKpDT,IALoD,EAMpDH,eANoD,GAOnDO,QAAQ,cACX,YAAC,IAAD,CAAMA,QAAQ,UAEd,uBACA,kBACE,GAAM,cADR,cAGA,uBAAK,oBAAMM,WAAW,MAClB,UAAa,uBADZ,2GAIL,uBACA,kBACE,GAAM,QADR,QAGA,wGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,mIAML,uBACA,kBACE,GAAM,MADR,MAGA,kDACA,4HACA,iDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,+WA0BL,uBACA,kBACE,GAAM,kBADR,qBAGA,sEACA,yDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,stBA+BL,uBACA,kBACE,GAAM,QADR,QAGA,6OACA,iCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,sQAYL,uBACA,kBACE,GAAM,QADR,QAGA,4FACA,oHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,0GAQL,uBACA,kBACE,GAAM,WADR,WAGA,wGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,0WAmBL,uBACA,kBACE,GAAM,UADR,UAGA,sDACA,sEACA,mHACA,8FACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,g1BA4BL,uBACA,kBACE,GAAM,gBADR,kBAGA,4DACA,uIACA,6HACA,uHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,sEAQL,uBACA,kBACE,GAAM,mEADR,yEAGA,+CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,8kD,gNAgDTT,EAAWU,gBAAiB","file":"component---src-flow-chart-demos-index-cn-mdx-21f8001ba5235ffff6ff.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Codes/custom-ui-old/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport Demo from \"./demo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h4 {...{\n      \"id\": \"简介\"\n    }}>{`简介`}</h4>\n    <p>{`纯粹html元素构建的自动布局的流程图，方便自定义节点和事件。`}</p>\n    <h2 {...{\n      \"id\": \"演示\"\n    }}>{`演示`}</h2>\n    <p>{`拖拽移动视图`}</p>\n    <Playground __position={0} __code={'<Demo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Demo mdxType=\"Demo\" />\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"import-api\"\n    }}>{`import API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import FlowChart, { addNode, addBranch, expandBranch, combineNodes, deleteNode } from './FlowChart';\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"外部容器\"\n    }}>{`外部容器`}</h2>\n    <p>{`FlowChart容器占满外部容器， 需显式指定外部容器大小，并设置backgroundColor属性与外容器backgroundColor一致（掩盖连线）。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<div style={{ backgroundColor: \"#f0f0f0\", width: 800, height: 800 }}>\n    <FlowChart backgroundColor='#f0f0f0' />\n</div>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"数据\"\n    }}>{`数据`}</h2>\n    <p>{`FlowChart的 data 属性接收节点数据。`}</p>\n    <p>{`data需为链表结构对象，data中的每个键值对代表一个节点，节点必须包含有id, next, pre这三个属性（头结点不能有pre, 尾节点不能有next）。节点任意添加自定义属性，会透传至组件。`}</p>\n    <p>{`必须通过headNodeId属性显示声明头结点。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const data = {\n    head: {\n        id: 'head',\n        next: ['aa'],\n        type: 'head',\n    },\n    aa:{\n        id: 'head',\n        next: ['tail'],\n        pre: ['head'],\n        type: 'head',\n    },\n    tail: {\n        id: 'tail',\n        pre: ['aa'],\n        type: 'tail',\n    }\n}\n\n<FlowChart\n    data={data}\n    headNodeId='head'\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"渲染节点rendernode\"\n    }}>{`渲染节点(*RenderNode)`}</h2>\n    <p>{`通过 RenderNode　属性(JSX.Element或者React组件)属性渲染节点。`}</p>\n    <p>{`也通过在节点自身属性中增加Render字段渲染节点，优先级更高。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const typeMap = {\n    head: <div style={{ width: 200, height: 100, background: 'black', color: \"#fff\" }}>{props.id}</div>\n    tail: (props) => <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n};\n\nconst initData = {\n    head: {\n        id: 'head',\n        next: ['tail'],\n        type: 'head',\n        Render: (props) => <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n    },\n    tail: {\n        id: 'tail',\n        pre: ['head'],\n        type: 'tail',\n    }\n}\n\nconst RenderNode = (props) => {\n    return typeMap[props.type](props);\n}\n\n<FlowChart\n    data={initData}\n    RenderNode={RenderNode}\n/>\n\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"配置设置\"\n    }}>{`配置设置`}</h2>\n    <p>{`通过config属性设置{ lineWidth: 连接线的宽度，lineColor:线的颜色, distance: { horizontal: 节点横向间隔，vertical: 节点纵向间隔}}, brotherNodeAlign(top | bottom | center): 不同高度情况下兄弟节点的对齐方式。} padding: { left, right, top, bottom(number) } 容器与流程图间`}</p>\n    <p>{`下面数值为默认值`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<FlowChart\n    config={{\n        lineWidth: 2,\n        lineColor: '#000',\n        distance: { horizontal: 50, vertical: 40 },\n        padding: { top: 24, left: 36, right: 36, bottom: 24 },\n        brotherNodeAlign: 'center' // top bottom\n    }}\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"操作按钮\"\n    }}>{`操作按钮`}</h2>\n    <p>{`内置三种操作按钮(showAddButton, showBranchButton, showCombineButton, 默认全启用)`}</p>\n    <p>{`节点下方对应showAddButton;　分支上方的对应showBranchButton；分支下方的对应showCombineButton。置属性值为true/false启用/不启用`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<FlowChart\n    showAddButton={true}\n    showBranchButton={true}\n    showCombineButton={true}\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"自定义操作按钮\"\n    }}>{`自定义操作按钮`}</h2>\n    <p>{`可以通过 (RenderAddButton, RenderBranchButton, RenderCombineButton) 属性 自定义渲染这三种操作按钮`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const RenderAddButton = (\n    <button>add</button>\n);\nconst RenderBranchButton = () => {\n    return (\n        <button>branch</button>\n    )\n};\nconst RenderMergeButton = (\n    <button>merge</button>\n);\n<FlowChart\n    RenderAddButton={RenderAddButton}\n    RenderBranchButton={RenderBranchButton}\n    RenderCombineButton={RenderMergeButton}\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"节点透传属性\"\n    }}>{`节点透传属性`}</h2>\n    <p>{`RenderNode节点中， 可以从props拿到以下属性`}</p>\n    <p>{`节点自身属性中除了(pre, next, Render)之外的所有属性，及id和自定义属性`}</p>\n    <p>{`触发操作回调的几种Action Function (onClickDeleteNode, onClickAddBranch, onClickAddNode, onClickAdd)`}</p>\n    <p>{`判断当前节点能否删除的canDelete(boolean)属性， 判断当前节点能否新增分支的canAddBranch(boolean)属性`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const typeMap = {\n    head: ({ onClickAddNode, onClickDeleteNode, onClickAddBranch, canDelete, canAddBranch, ...props }) => {\n        return (\n            <div style={{ width: 200, height: 100, background: 'black', color: \"#fff\" }}>\n                {props.id}\n                <button onClick={onClickAddNode}>addNode</button>\n                {canAddBranch && <button onClick={onClickAddBranch}>addBranch</button>}\n                {canDelete && <button onClick={onClickDeleteNode}>delete</button>}\n            </div>\n        )\n    },\n    tail: (props) => {\n        return (\n            <div style={{ width: 200, height: 100, background: 'pink', color: \"#fff\" }}>{props.id}</div>\n        )\n    },\n}\n\nconst RenderNode = (props) => {\n    return typeMap[props.type](props);\n}\n\n<FlowChart\n    RenderNode={RenderNode}\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"操作回调onchange\"\n    }}>{`操作回调(onChange)`}</h2>\n    <p>{`通过点击内置操作按钮，或者透传至节点的Action触发onChange`}</p>\n    <p>{`三种操作按钮对应回调type分别为'add'(target为所属节点id), 'expandBranch'(target为分支所属节点id), 'combineNodes'(target为对应分支的启示节点Id数组集合)`}</p>\n    <p>{`此外透传至节点的Action可触发以下type回调 onClickAdd->'add'(target为所属节点id), onClickAddNode->'addNode'(target为所属节点id)`}</p>\n    <p>{`onClickDeleteNode->'deleteNode'(target为所属节点id), , onClickAddBranch->'addBranch'(target为所属节点id)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<FlowChart\n    onChange={({ type, target }) => {\n\n    }}\n/>\n`}</code></pre>\n    <br />\n    <h2 {...{\n      \"id\": \"内置数据操作apiaddnode-addbranch-expandbranch-combinenodes-deletenode\"\n    }}>{`内置数据操作API(addNode, addBranch, expandBranch, combineNodes, deleteNode)`}</h2>\n    <p>{`提供内置的API用以生成正确的后续data。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import FlowChart, { addNode, addBranch, expandBranch, combineNodes, deleteNode } from './FlowChart';\nconst [data, setData] = useState(initData);\nconst onChange = useCallback(({ type, target }) => {\n    if (type === 'add') {\n        if (data[target].next.length === 1) {\n            if (Math.round(Math.random())) {\n                const newData = addNode(data, target, createNewNode());\n                setData(newData);\n            } else {\n                const newData = addBranch(data, target, [createNewNode(), createNewNode()]);\n                setData(newData);\n            }\n        } else {\n            const newData = addNode(data, target, createNewNode());\n            setData(newData);\n        }\n    } else if (type === 'expandBranch') {\n        const newData = expandBranch(data, target, [createNewNode()]);\n        setData(newData);\n    } else if (type === 'combineNodes') {\n        const newData = combineNodes(data, target, createNewNode());\n        setData(newData);\n    } else if (type === 'deleteNode') {\n        const newData = deleteNode(data, target);\n        setData(newData);\n    } else if (type === 'addBranch') {\n        const newData = addBranch(data, target, [createNewNode(), createNewNode()]);\n        setData(newData);\n    } else if (type === 'addNode') {\n            const newData = addNode(data, target, createNewNode());\n            setData(newData);   \n    }\n}, []);\nreturn (\n    <div className=\"flowchart-container\">\n        <FlowChart\n            onChange={onChange}\n            headNodeId= 'head'\n        />\n    </div>\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{QbE7:function(e,t,b){"use strict";b.r(t),b.d(t,"_frontmatter",(function(){return i})),b.d(t,"default",(function(){return x}));var n=b("k0FJ"),a=b("oedh"),c=b("mXGw"),l=b("/FXl"),o=b("TjRS"),r=b("ZFoC"),u=b("/t70"),p=(b("aD51"),["components"]),i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Checkbox/demos/index.cn.mdx"}});var d={_frontmatter:i},h=o.a;function x(e){var t,b,x,m,j,O,k,C,s=e.components,g=Object(a.a)(e,p);return Object(l.b)(h,Object(n.a)({},d,g,{components:s,mdxType:"MDXLayout"}),Object(l.b)("h4",{id:"简介"},"简介"),Object(l.b)("p",null,"多选框"),Object(l.b)("h2",{id:"可交互背景"},"可交互背景"),Object(l.b)("p",null,'设置 interactive 为 "background"(默认) / true 启用选择框可交互背景，false 关闭。'),Object(l.b)("p",null,'当 interactive 为 "background" 时， 可交互背景的并不占据真实空间，为true时占据真实空间。'),Object(l.b)(r.c,{__position:0,__code:"<div style={{ lineHeight: '16px' }}>111111111111111111111111111111111</div>\n<Checkbox interactive=\"background\">选择框1</Checkbox>\n<div style={{ lineHeight: '16px' }}>111111111111111111111111111111111</div>\n<Checkbox interactive={true}>选择框2</Checkbox>\n<div style={{ lineHeight: '16px' }}>111111111111111111111111111111111</div>\n<Checkbox interactive={false}>选择框3</Checkbox>",__scope:(t={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},t.DefaultLayout=o.a,t._frontmatter=i,t),mdxType:"Playground"},Object(l.b)("div",{style:{lineHeight:"16px"}},"111111111111111111111111111111111"),Object(l.b)(u.a,{interactive:"background",mdxType:"Checkbox"},"选择框1"),Object(l.b)("div",{style:{lineHeight:"16px"}},"111111111111111111111111111111111"),Object(l.b)(u.a,{interactive:!0,mdxType:"Checkbox"},"选择框2"),Object(l.b)("div",{style:{lineHeight:"16px"}},"111111111111111111111111111111111"),Object(l.b)(u.a,{interactive:!1,mdxType:"Checkbox"},"选择框3")),Object(l.b)("br",null),Object(l.b)("h2",{id:"颜色"},"颜色"),Object(l.b)("p",null,'通过设置 color 属性为 "合法的css颜色字符串" 改变Checkbox颜色(默认为"#3E4DA7")。'),Object(l.b)(r.c,{__position:2,__code:'<Checkbox color="red">选择框1</Checkbox>\n<Checkbox color="green">选择框2</Checkbox>',__scope:(b={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},b.DefaultLayout=o.a,b._frontmatter=i,b),mdxType:"Playground"},Object(l.b)(u.a,{color:"red",mdxType:"Checkbox"},"选择框1"),Object(l.b)(u.a,{color:"green",mdxType:"Checkbox"},"选择框2")),Object(l.b)("br",null),Object(l.b)("h2",{id:"大小"},"大小"),Object(l.b)("p",null,'通过设置 size 属性为 "合法的css长度单位" 改变Checkbox大小(默认为"20px")。'),Object(l.b)(r.c,{__position:4,__code:'<Checkbox size={14}>选择框1</Checkbox>\n<Checkbox size="32px">选择框2</Checkbox>',__scope:(x={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},x.DefaultLayout=o.a,x._frontmatter=i,x),mdxType:"Playground"},Object(l.b)(u.a,{size:14,mdxType:"Checkbox"},"选择框1"),Object(l.b)(u.a,{size:"32px",mdxType:"Checkbox"},"选择框2")),Object(l.b)("br",null),Object(l.b)("h2",{id:"children标签放置位置"},"children标签放置位置"),Object(l.b)("p",null,'通过设置 labelPlacement 属性为 "bottom" | "top" | "left" | "right"(默认) 改变children标签放置位置。'),Object(l.b)(r.c,{__position:6,__code:'<Checkbox labelPlacement="bottom">在下面</Checkbox>\n<Checkbox labelPlacement="top">在上面</Checkbox>\n<Checkbox labelPlacement="right">在右边</Checkbox>\n<Checkbox labelPlacement="left">在左边</Checkbox>',__scope:(m={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},m.DefaultLayout=o.a,m._frontmatter=i,m),mdxType:"Playground"},Object(l.b)(u.a,{labelPlacement:"bottom",mdxType:"Checkbox"},"在下面"),Object(l.b)(u.a,{labelPlacement:"top",mdxType:"Checkbox"},"在上面"),Object(l.b)(u.a,{labelPlacement:"right",mdxType:"Checkbox"},"在右边"),Object(l.b)(u.a,{labelPlacement:"left",mdxType:"Checkbox"},"在左边")),Object(l.b)("br",null),Object(l.b)("h2",{id:"children标签离多选框距离"},"children标签离多选框距离"),Object(l.b)("p",null,'通过设置 labelDistance 属性为 "合法的css长度单位" 设置children标签离多选框的距离。(默认.5em)'),Object(l.b)(r.c,{__position:8,__code:'<Checkbox labelDistance={24}>24px</Checkbox>\n<Checkbox labelDistance="3em">3em</Checkbox>',__scope:(j={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},j.DefaultLayout=o.a,j._frontmatter=i,j),mdxType:"Playground"},Object(l.b)(u.a,{labelDistance:24,mdxType:"Checkbox"},"24px"),Object(l.b)(u.a,{labelDistance:"3em",mdxType:"Checkbox"},"3em")),Object(l.b)("br",null),Object(l.b)("h2",{id:"禁用状态"},"禁用状态"),Object(l.b)("p",null,"通过设置 disabled 属性为 true 禁用选择框"),Object(l.b)(r.c,{__position:10,__code:"<Checkbox disabled>禁用状态</Checkbox>\n<Checkbox disabled checked>\n  禁用状态\n</Checkbox>",__scope:(O={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},O.DefaultLayout=o.a,O._frontmatter=i,O),mdxType:"Playground"},Object(l.b)(u.a,{disabled:!0,mdxType:"Checkbox"},"禁用状态"),Object(l.b)(u.a,{disabled:!0,checked:!0,mdxType:"Checkbox"},"禁用状态")),Object(l.b)("br",null),Object(l.b)("h2",{id:"其他原生html-input-typecheckbox-的属性"},'其他原生HTML input type="checkbox" 的属性'),Object(l.b)("p",null,"受控、非受控，id等。"),Object(l.b)("br",null),Object(l.b)("h2",{id:"选择框群组"},"选择框群组"),Object(l.b)("p",null,"可以通过Checkbox.Group包裹Checkbox，来集体控制Checkbox。Group是个纯粹控制组件，不生成元素。"),Object(l.b)("p",null,"不要求是直接子代关系，可以任意布局。但是要求Checkbox填写 name 属性，未填写的不算在Group里。"),Object(l.b)("p",null,"可以通过给Checkbox.Group 设置 disabled 属性为 true，来禁用这个群组里的所有选择框。"),Object(l.b)("p",null,"可以通过给Checkbox.Group 设置 max 属性来限制这个群组最多勾选几个选择框，默认不限制。"),Object(l.b)("p",null,"可以给非受控的Checkbox.Group设置 defaultValue 属性来控制其默认选中项。"),Object(l.b)(r.c,{__position:13,__code:'() => {\n  const [group1, setGroup1] = React.useState([])\n  const [group2, setGroup2] = React.useState([\'g\'])\n  return (\n    <>\n      <Checkbox.Group onChange={value => setGroup1(value)}>\n        <Checkbox name="a">选择框a</Checkbox>\n        <Checkbox name="b">选择框b</Checkbox>\n      </Checkbox.Group>\n      <span style={{ marginLeft: 24 }}>群组值： [{group1.join(\', \')}]</span>\n      <div />\n      <Checkbox.Group disabled>\n        <Checkbox name="c">选择框c</Checkbox>\n        <Checkbox name="d">选择框d</Checkbox>\n        <Checkbox>选择框未填name，所以不被禁用</Checkbox>\n      </Checkbox.Group>\n      <div />\n      <Checkbox.Group\n        defaultValue={group2}\n        max={2}\n        onChange={value => setGroup2(value)}\n      >\n        <Checkbox name="f">选择框f</Checkbox>\n        <Checkbox name="g">选择框g</Checkbox>\n        <Checkbox name="h">选择框h</Checkbox>\n        <Checkbox name="i">选择框i</Checkbox>\n        <span style={{ marginLeft: 24 }}>群组值： [{group2.join(\', \')}]</span>\n      </Checkbox.Group>\n    </>\n  )\n}',__scope:(k={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},k.DefaultLayout=o.a,k._frontmatter=i,k),mdxType:"Playground"},(function(){var e=c.useState([]),t=e[0],b=e[1],n=c.useState(["g"]),a=n[0],o=n[1];return Object(l.b)(c.Fragment,null,Object(l.b)(u.a.Group,{onChange:function(e){return b(e)}},Object(l.b)(u.a,{name:"a",mdxType:"Checkbox"},"选择框a"),Object(l.b)(u.a,{name:"b",mdxType:"Checkbox"},"选择框b")),Object(l.b)("span",{style:{marginLeft:24}},"群组值： [",t.join(", "),"]"),Object(l.b)("div",null),Object(l.b)(u.a.Group,{disabled:!0},Object(l.b)(u.a,{name:"c",mdxType:"Checkbox"},"选择框c"),Object(l.b)(u.a,{name:"d",mdxType:"Checkbox"},"选择框d"),Object(l.b)(u.a,{mdxType:"Checkbox"},"选择框未填name，所以不被禁用")),Object(l.b)("div",null),Object(l.b)(u.a.Group,{defaultValue:a,max:2,onChange:function(e){return o(e)}},Object(l.b)(u.a,{name:"f",mdxType:"Checkbox"},"选择框f"),Object(l.b)(u.a,{name:"g",mdxType:"Checkbox"},"选择框g"),Object(l.b)(u.a,{name:"h",mdxType:"Checkbox"},"选择框h"),Object(l.b)(u.a,{name:"i",mdxType:"Checkbox"},"选择框i"),Object(l.b)("span",{style:{marginLeft:24}},"群组值： [",a.join(", "),"]")))})),Object(l.b)("br",null),Object(l.b)("h2",{id:"受控模式下的选择框群组"},"受控模式下的选择框群组"),Object(l.b)("p",null,"通过给 Checkbox.Group 设置 value 和 onChange 属性使其受控。"),Object(l.b)("p",null,"value 属性要求为仅包含其内Checkbox name的群组。"),Object(l.b)(r.c,{__position:15,__code:"() => {\n  const [value, setValue] = React.useState(['j'])\n  return (\n    <>\n      <Checkbox\n        checked={value.length === 4}\n        onChange={() =>\n          setValue(value.length === 4 ? [] : ['j', 'k', 'l', 'm'])\n        }\n      >\n        全选\n      </Checkbox>\n      <div />\n      <Checkbox.Group value={value} onChange={value => setValue(value)}>\n        <Checkbox name=\"j\">选择框j</Checkbox>\n        <Checkbox name=\"k\">选择框k</Checkbox>\n        <Checkbox name=\"l\">选择框l</Checkbox>\n        <Checkbox name=\"m\">选择框m</Checkbox>\n        <span style={{ marginLeft: 24 }}>群组值： [{value.join(', ')}]</span>\n      </Checkbox.Group>\n    </>\n  )\n}",__scope:(C={props:g,DefaultLayout:o.a,Playground:r.c,Checkbox:u.a},C.DefaultLayout=o.a,C._frontmatter=i,C),mdxType:"Playground"},(function(){var e=c.useState(["j"]),t=e[0],b=e[1];return Object(l.b)(c.Fragment,null,Object(l.b)(u.a,{checked:4===t.length,onChange:function(){return b(4===t.length?[]:["j","k","l","m"])},mdxType:"Checkbox"},"全选"),Object(l.b)("div",null),Object(l.b)(u.a.Group,{value:t,onChange:function(e){return b(e)}},Object(l.b)(u.a,{name:"j",mdxType:"Checkbox"},"选择框j"),Object(l.b)(u.a,{name:"k",mdxType:"Checkbox"},"选择框k"),Object(l.b)(u.a,{name:"l",mdxType:"Checkbox"},"选择框l"),Object(l.b)(u.a,{name:"m",mdxType:"Checkbox"},"选择框m"),Object(l.b)("span",{style:{marginLeft:24}},"群组值： [",t.join(", "),"]")))})),Object(l.b)("br",null),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"属性"),Object(l.b)("th",{parentName:"tr",align:null},"说明"),Object(l.b)("th",{parentName:"tr",align:null},"类型"),Object(l.b)("th",{parentName:"tr",align:null},"默认值"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"interactive"),Object(l.b)("td",{parentName:"tr",align:null},"可交互背景"),Object(l.b)("td",{parentName:"tr",align:null},'"background" ',"|"," boolean"),Object(l.b)("td",{parentName:"tr",align:null},'"background"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"color"),Object(l.b)("td",{parentName:"tr",align:null},"颜色"),Object(l.b)("td",{parentName:"tr",align:null},'"合法的css颜色字符串"'),Object(l.b)("td",{parentName:"tr",align:null},'"#3E4DA7"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"size"),Object(l.b)("td",{parentName:"tr",align:null},"大小"),Object(l.b)("td",{parentName:"tr",align:null},'" "合法的css长度单位"'),Object(l.b)("td",{parentName:"tr",align:null},'"20px"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"labelPlacement"),Object(l.b)("td",{parentName:"tr",align:null},"标签位置"),Object(l.b)("td",{parentName:"tr",align:null},'"bottom" ',"|",' "top" ',"|",' "left" ',"|",' "right"'),Object(l.b)("td",{parentName:"tr",align:null},'"right"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"labelDistance"),Object(l.b)("td",{parentName:"tr",align:null},"标签距离"),Object(l.b)("td",{parentName:"tr",align:null},'"合法的css长度单位"'),Object(l.b)("td",{parentName:"tr",align:null},'".5em"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"disabled"),Object(l.b)("td",{parentName:"tr",align:null},"禁用状态"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"其他"),Object(l.b)("td",{parentName:"tr",align:null},"html属性"),Object(l.b)("td",{parentName:"tr",align:null},"如 id, required 等"),Object(l.b)("td",{parentName:"tr",align:null})))))}void 0!==x&&x&&x===Object(x)&&Object.isExtensible(x)&&!x.hasOwnProperty("__filemeta")&&Object.defineProperty(x,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Checkbox/demos/index.cn.mdx"}}),x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-checkbox-demos-index-cn-mdx-7cb91444cb5f94105a28.js.map
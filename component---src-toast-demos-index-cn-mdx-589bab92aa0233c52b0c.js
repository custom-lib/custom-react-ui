(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"3vdx":function(t,n,e){"use strict";e.r(n),e.d(n,"_frontmatter",(function(){return s})),e.d(n,"default",(function(){return m}));var o=e("k0FJ"),a=e("oedh"),l=(e("mXGw"),e("/FXl")),b=e("TjRS"),r=e("ZFoC"),i=e("x7xS"),u=e("dFUv"),c=(e("aD51"),["components"]),s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Toast/demos/index.cn.mdx"}});var p={_frontmatter:s},d=b.a;function m(t){var n,e,m,j,C,O,k,h,y,f,T,g,w=t.components,N=Object(a.a)(t,c);return Object(l.b)(d,Object(o.a)({},p,N,{components:w,mdxType:"MDXLayout"}),Object(l.b)("h4",{id:"简介"},"简介"),Object(l.b)("p",null,"以List和Mask为基础的消息条。"),Object(l.b)("p",null,"不需要写进render，可以通过js调用直接消息项。"),Object(l.b)("p",null,"虽然功能完善，支持自定义内容，可以实现Dialog、Modal等的效果，但是建议只作为错误、成功提示等轻量级交互来使用。"),Object(l.b)("h2",{id:"单例和多个实例"},"单例和多个实例"),Object(l.b)("p",null,"默认导入的Toast是个单例。"),Object(l.b)("p",null,"也支持生成另外的实例，用以封装成不同类型的Toast效果。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import Toast from '../index';\n\nimport { ToastClass } from '../index';\n\nconst Toast2 = new ToastClass();\n")),Object(l.b)("br",null),Object(l.b)("h2",{id:"注册"},"注册"),Object(l.b)("p",null,"Toast需要个容器来渲染，应此提供了两种方式来注册容器(注册仅接受一次，第二次无效)。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"方式一: 函数式")),Object(l.b)("p",null,"通过init函数注册，函数接受一个可选的参数HTMLElment作为容器。建议在App的入口处初始化。"),Object(l.b)("p",null,"如果未指定容器，将在body下自动创建一个id为toast-container的div HTMLElement作为容器。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import Toast from '../index';\n\nconst contaner = document.querySelector(\"#xx\");\nToast.init(container);\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"方式二： 组件式")),Object(l.b)("p",null,"如果你需要对Toast注入i18n、主题配置、Redux Store等东西，也可以通过Toast.Provider组件式的方式注册。"),Object(l.b)("p",null,"Toast.Provider接受一个可选的container属性指定容器，如果没有，也将自动创建，规则如方式一所述。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport Toast from '../index';\n\nconst contaner = document.querySelector(\"#xx\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <IntlProvider>\n            <Toast.Provider container={contaner}/>\n            <App />\n        </IntlProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"但是显式手动注册容器并不是必须的。如果仅把Toast用作单一语言的轻量级提示，可以不用注册容器直接使用API。")),Object(l.b)("p",null,"Toast内部会在第一次调用API时候自动按方式一所述规则创建容器。"),Object(l.b)("br",null),Object(l.b)("h2",{id:"基础用法---内容与持续时间"},"基础用法 - 内容与持续时间"),Object(l.b)("p",null,"通过 Toast.show 生成一个消息项。"),Object(l.b)("p",null,"Toast.show接受一个对象作为参数，Content是唯一的必填属性，表示消息项的内容。"),Object(l.b)("p",null,"Content属性可以是简单的数字和字符串， 这时候消息项的样式是内置的黑底白字风格。"),Object(l.b)("p",null,"Content属性也可以接受自定义的JSX.Element或者React组件。"),Object(l.b)("p",null,"通过设置参数中的 duration 属性控制该消息项的持续时间(ms)， 不填为默认 3000。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nexport const CustomContent = () => {\n    return <div style={{ width:200, height:100, backgroundColor:'yellow' }}>这是一个React组件</div>\n}\n")),Object(l.b)(r.c,{__position:2,__code:"<button onClick={() => Toast.show({ Content: 123456, duration: 1000 })}>\n  数字\n</button>\n<button onClick={() => Toast.show({ Content: '这是一个消息项' })}>\n  字符\n</button>\n<button\n  onClick={() =>\n    Toast.show({\n      Content: (\n        <div style={{ backgroundColor: 'red', color: 'white' }}>\n          这是一个jsx元素\n        </div>\n      ),\n      duration: 3000,\n    })\n  }\n>\n  jsx元素\n</button>\n<button\n  onClick={() =>\n    Toast.show({\n      Content: CustomContent,\n      duration: 4000,\n    })\n  }\n>\n  React组件\n</button>",__scope:(n={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},n.DefaultLayout=b.a,n._frontmatter=s,n),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:123456,duration:1e3})}},"数字"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项"})}},"字符"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:Object(l.b)("div",{style:{backgroundColor:"red",color:"white"}},"这是一个jsx元素"),duration:3e3})}},"jsx元素"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:u.a,duration:4e3})}},"React组件")),Object(l.b)("br",null),Object(l.b)("h2",{id:"自定义消息项容器样式"},"自定义消息项容器样式"),Object(l.b)("p",null,"为了实现动画效果，每个消息项外都有一层不可见容器，默认为这个容器设置了 margin-button: 12px。"),Object(l.b)("p",null,"请注意不要给自定义内容的消息项设置margin, 这么做会撑开容器， 如下的p元素。"),Object(l.b)("p",null,"如果对于这个距离不满意，或者想附加其他的样式(虽然我不知道为什么要这么做)。"),Object(l.b)("p",null,"可以通过在show的参数中添加 ItemWrapperStyle, ItemWrapperClassName 属性来自定义该消息项的容器样式。"),Object(l.b)("p",null,"也可以通过另外的API setItemWrapperStyle 和 setItemWrapperClassName 全局设置当前Toast实例下每个消息项容器的样式(当然优先级没有show参数中添加的高)。"),Object(l.b)("p",null,"请注意这两个API的改变是持久性的、全局的，当前Toast实例下后续所有消息项都将应用修改，当然也可以空参再次调用这两个API进行重置。"),Object(l.b)(r.c,{__position:4,__code:"<button\n  onClick={() => {\n    Toast.setItemWrapperStyle({\n      marginBottom: Math.floor(Math.random() * (120 - 12 + 1) + 12),\n    })\n    Toast.show({\n      Content: '这是一个消息项',\n      duration: 3000,\n    })\n  }}\n>\n  随机设置全局间距12-120\n</button>\n<button\n  onClick={() => {\n    Toast.setItemWrapperStyle()\n    Toast.show({\n      Content: '这是一个消息项',\n      duration: 3000,\n    })\n  }}\n>\n  恢复默认间距-12\n</button>\n<button\n  onClick={() =>\n    Toast.show({\n      Content: '这是一个消息项',\n      duration: 3000,\n      ItemWrapperStyle: { marginBottom: 24 },\n    })\n  }\n>\n  自定义间距24\n</button>\n<button\n  onClick={() =>\n    Toast.show({\n      Content: (\n        <div style={{ backgroundColor: 'red', color: 'white' }}>\n          这是一个jsx div元素\n        </div>\n      ),\n      duration: 3000,\n      ItemWrapperStyle: { marginBottom: 36 },\n    })\n  }\n>\n  jsx div元素 - 自定义间距36\n</button>\n<button\n  onClick={() =>\n    Toast.show({\n      Content: (\n        <p style={{ backgroundColor: 'red', color: 'white' }}>\n          这是一个jsx p元素\n        </p>\n      ),\n      duration: 3000,\n      ItemWrapperStyle: { marginBottom: 36 },\n    })\n  }\n>\n  jsx p元素 - 自定义间距36\n</button>",__scope:(e={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},e.DefaultLayout=b.a,e._frontmatter=s,e),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){i.a.setItemWrapperStyle({marginBottom:Math.floor(109*Math.random()+12)}),i.a.show({Content:"这是一个消息项",duration:3e3})}},"随机设置全局间距12-120"),Object(l.b)("button",{onClick:function(){i.a.setItemWrapperStyle(),i.a.show({Content:"这是一个消息项",duration:3e3})}},"恢复默认间距-12"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",duration:3e3,ItemWrapperStyle:{marginBottom:24}})}},"自定义间距24"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:Object(l.b)("div",{style:{backgroundColor:"red",color:"white"}},"这是一个jsx div元素"),duration:3e3,ItemWrapperStyle:{marginBottom:36}})}},"jsx div元素 - 自定义间距36"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:Object(l.b)("p",{style:{backgroundColor:"red",color:"white"}},"这是一个jsx p元素"),duration:3e3,ItemWrapperStyle:{marginBottom:36}})}},"jsx p元素 - 自定义间距36")),Object(l.b)("br",null),Object(l.b)("h2",{id:"自定义消息列表样式"},"自定义消息列表样式"),Object(l.b)("p",null,"默认情况下，消息列表居于屏幕中间，离顶部30%处。其样式如下。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"const ToastList = styled(List)`\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: fit-content;\n    left: 50%;\n    top: 30%;\n    transform: translateX(-50%);\n    z-index: 200;\n    pointer-events: none;\n` as typeof List;\n")),Object(l.b)("p",null,"可以通过 setListStyle, setListClassName 这两个API修改当前Toast实例下消息列表样式。(也是持久性的、全局的)"),Object(l.b)(r.c,{__position:6,__code:"<button\n  onClick={() => {\n    Toast.setListStyle()\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  固定居中弹出(默认)\n</button>\n<button\n  onClick={() => {\n    Toast.setListStyle({ top: '50%', transform: 'translate(-50%, -50%)' })\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  自动居中弹出\n</button>\n<button\n  onClick={() => {\n    Toast.setListStyle({ top: '24px' })\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  上方正弹(新的在上)\n</button>\n<button\n  onClick={() => {\n    Toast.setListStyle({ top: '24px', flexDirection: 'column-reverse' })\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  上方反弹(新的在下)\n</button>\n<button\n  onClick={() => {\n    Toast.setListStyle({\n      top: 'unset',\n      left: 'unset',\n      transform: 'unset',\n      right: '12px',\n      bottom: '24px',\n    })\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  右下正弹(新的在上)\n</button>\n<button\n  onClick={() => {\n    Toast.setListStyle({\n      top: 'unset',\n      left: 'unset',\n      transform: 'unset',\n      right: '12px',\n      bottom: '24px',\n      flexDirection: 'column-reverse',\n    })\n    Toast.show({\n      Content: '这是一条消息项',\n      duration: 3000,\n    })\n  }}\n>\n  右下反弹(新的在下)\n</button>",__scope:(m={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},m.DefaultLayout=b.a,m._frontmatter=s,m),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){i.a.setListStyle(),i.a.show({Content:"这是一条消息项",duration:3e3})}},"固定居中弹出(默认)"),Object(l.b)("button",{onClick:function(){i.a.setListStyle({top:"50%",transform:"translate(-50%, -50%)"}),i.a.show({Content:"这是一条消息项",duration:3e3})}},"自动居中弹出"),Object(l.b)("button",{onClick:function(){i.a.setListStyle({top:"24px"}),i.a.show({Content:"这是一条消息项",duration:3e3})}},"上方正弹(新的在上)"),Object(l.b)("button",{onClick:function(){i.a.setListStyle({top:"24px",flexDirection:"column-reverse"}),i.a.show({Content:"这是一条消息项",duration:3e3})}},"上方反弹(新的在下)"),Object(l.b)("button",{onClick:function(){i.a.setListStyle({top:"unset",left:"unset",transform:"unset",right:"12px",bottom:"24px"}),i.a.show({Content:"这是一条消息项",duration:3e3})}},"右下正弹(新的在上)"),Object(l.b)("button",{onClick:function(){i.a.setListStyle({top:"unset",left:"unset",transform:"unset",right:"12px",bottom:"24px",flexDirection:"column-reverse"}),i.a.show({Content:"这是一条消息项",duration:3e3})}},"右下反弹(新的在下)")),Object(l.b)("br",null),Object(l.b)("h2",{id:"自定义进出场动画"},"自定义进出场动画"),Object(l.b)("p",null,"可以通过设置show的参数中的 animationType 属性改变进出场动画。"),Object(l.b)("p",null,'animationType 可为 "zoom" | "blur" | "clipRectSp" | "clipRect" | "clipCircle" | "fade" | "flip" | "door" | "slideUp" | "slideDown" | "slideRight" | "slideLeft" | "rotate"　设置进出场动画。'),Object(l.b)("p",null,"通过设置 animationDuration 属性(ms)，修改进出场动画持续时间。"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"type animationDuration = number | { enter: number, leave: number }\n")),Object(l.b)(r.c,{__position:8,__code:"<button onClick={() => Toast.show({ Content: '这是一个消息项' })}>\n  zoom(默认)\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'door' })\n  }\n>\n  door\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'fade' })\n  }\n>\n  fade\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'flip' })\n  }\n>\n  flip\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'rotate' })\n  }\n>\n  rotate\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'slideDown' })\n  }\n>\n  slideDown\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'slideUp' })\n  }\n>\n  slideUp\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'slideLeft' })\n  }\n>\n  slideLeft\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'slideRight' })\n  }\n>\n  slideRight\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'blur' })\n  }\n>\n  blur\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'clipCircle' })\n  }\n>\n  clipCircle\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'clipRect' })\n  }\n>\n  clipRect\n</button>\n<button\n  onClick={() =>\n    Toast.show({ Content: '这是一个消息项', animationType: 'clipRectSp' })\n  }\n>\n  clipRectSp\n</button>",__scope:(j={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},j.DefaultLayout=b.a,j._frontmatter=s,j),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项"})}},"zoom(默认)"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"door"})}},"door"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"fade"})}},"fade"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"flip"})}},"flip"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"rotate"})}},"rotate"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"slideDown"})}},"slideDown"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"slideUp"})}},"slideUp"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"slideLeft"})}},"slideLeft"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"slideRight"})}},"slideRight"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"blur"})}},"blur"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"clipCircle"})}},"clipCircle"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"clipRect"})}},"clipRect"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",animationType:"clipRectSp"})}},"clipRectSp")),Object(l.b)("br",null),Object(l.b)("h2",{id:"唯一"},"唯一"),Object(l.b)("p",null,"通过设置 show 参数中的 unique 属性为 true，使得该消息项唯一(及如果存在其他消息项，哪怕还在持续时间内也会销毁)。"),Object(l.b)(r.c,{__position:10,__code:"<button\n  onClick={() => Toast.show({ Content: '这是一个消息项', unique: true })}\n>\n  唯一\n</button>",__scope:(C={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},C.DefaultLayout=b.a,C._frontmatter=s,C),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个消息项",unique:!0})}},"唯一")),Object(l.b)("br",null),Object(l.b)("h2",{id:"防重复"},"防重复"),Object(l.b)("p",null,"通过设置 show 参数中的 preventDuplicate 属性为 true，防止消息项重复。"),Object(l.b)("p",null,"生成消息项时会对Content内容进行一次浅比较检测。"),Object(l.b)(r.c,{__position:12,__code:"<button\n  onClick={() => Toast.show({ Content: '防重复1', preventDuplicate: true })}\n>\n  防重复1\n</button>\n<button\n  onClick={() => Toast.show({ Content: 123456, preventDuplicate: true })}\n>\n  防重复2\n</button>",__scope:(O={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},O.DefaultLayout=b.a,O._frontmatter=s,O),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"防重复1",preventDuplicate:!0})}},"防重复1"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:123456,preventDuplicate:!0})}},"防重复2")),Object(l.b)("br",null),Object(l.b)("h2",{id:"最大数量"},"最大数量"),Object(l.b)("p",null,"通过设置 show 参数中的 maximum 限制最大消息项数量。消息项数量大于该值时，早生成的将被销毁。"),Object(l.b)(r.c,{__position:14,__code:"<button onClick={() => Toast.show({ Content: `最多3个`, maximum: 3 })}>\n  最大数量3\n</button>\n<button onClick={() => Toast.show({ Content: `最多4个`, maximum: 4 })}>\n  最大数量4\n</button>",__scope:(k={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},k.DefaultLayout=b.a,k._frontmatter=s,k),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"最多3个",maximum:3})}},"最大数量3"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"最多4个",maximum:4})}},"最大数量4")),Object(l.b)("br",null),Object(l.b)("h2",{id:"消息队列"},"消息队列"),Object(l.b)("p",null,"通过设置 show 参数中的 queue 属性为 true， 将本次消息项加入消息队列。"),Object(l.b)("p",null,"消息队列中的头部消息项，将在消息列表中的消息项为空时自动渲染。"),Object(l.b)(r.c,{__position:16,__code:"<button\n  onClick={() => Toast.show({ Content: `消息队列中的消息项`, queue: true })}\n>\n  消息队列\n</button>",__scope:(h={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},h.DefaultLayout=b.a,h._frontmatter=s,h),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"消息队列中的消息项",queue:!0})}},"消息队列")),Object(l.b)("br",null),Object(l.b)("h2",{id:"永久显示和手动关闭"},"永久显示和手动关闭"),Object(l.b)("p",null,"通过设置 show 参数中的 duration 为 0 时，消息项将不会自动销毁。"),Object(l.b)("p",null,"而 show API 的调用将会返回一个key值标识当前消息项， 当然也可以在 show 的参数中设置 key 属性(number | string)手动赋予该标识(key相同时消息项不会重复生成)。"),Object(l.b)("p",null,"然后调用另外两个API -- hide(key: string | number), hideAll() 来手动关闭消息项。"),Object(l.b)("p",null,"hideAll API 会把消息队列中的消息项也一并清空。"),Object(l.b)(r.c,{__position:18,__code:"<button\n  onClick={() =>\n    Toast.show({ Content: `key='1314'`, key: '1314', duration: 0 })\n  }\n>\n  key='1234'\n</button>\n<button onClick={() => Toast.hide('1314')}>销毁key='1314'</button>\n<button\n  onClick={() => {\n    const key = Toast.show({ Content: `key自动生成` })\n    setTimeout(() => Toast.hide(key), 10000)\n  }}\n>\n  key自动生成\n</button>\n<button onClick={() => Toast.hideAll()}>销毁所有</button>",__scope:(y={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},y.DefaultLayout=b.a,y._frontmatter=s,y),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:"key='1314'",key:"1314",duration:0})}},"key='1234'"),Object(l.b)("button",{onClick:function(){return i.a.hide("1314")}},"销毁key='1314'"),Object(l.b)("button",{onClick:function(){var t=i.a.show({Content:"key自动生成"});setTimeout((function(){return i.a.hide(t)}),1e4)}},"key自动生成"),Object(l.b)("button",{onClick:function(){return i.a.hideAll()}},"销毁所有")),Object(l.b)("br",null),Object(l.b)("h2",{id:"销毁回调"},"销毁回调"),Object(l.b)("p",null,"通过 show 参数中的 onClose 参数，设置消息项销毁的回调函数。"),Object(l.b)("br",null),Object(l.b)("h2",{id:"蒙版"},"蒙版"),Object(l.b)("p",null,"有了永久显示和手动关闭，现在距离Modal差的，就是蒙版了。"),Object(l.b)("p",null,"尽管提供了功能，但是非常不建议把Toast用在这么重的交互上。"),Object(l.b)("p",null,"如果非要这么做，在 show API的参数中设置 showMask 属性为true即可开启蒙版。"),Object(l.b)("p",null,"蒙版会屏蔽底下东西的点击，阻止body窗口的滚动，让用户聚焦在消息项上。"),Object(l.b)("p",null,"当所有带 showMask 的消息项销毁时，蒙版才会销毁。"),Object(l.b)(r.c,{__position:21,__code:"<button\n  onClick={() =>\n    Toast.show({\n      Content: (\n        <div style={{ padding: 24, backgroundColor: '#fff' }}>\n          <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n          <button\n            onClick={() => Toast.show({ Content: '这是一个持续3秒的消息项' })}\n          >\n            点击生成持续3秒的消息项\n          </button>\n        </div>\n      ),\n      showMask: true,\n      key: 'mask',\n      duration: 0,\n    })\n  }\n>\n  带蒙版的消息项\n</button>",__scope:(f={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},f.DefaultLayout=b.a,f._frontmatter=s,f),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){return i.a.show({Content:Object(l.b)("div",{style:{padding:24,backgroundColor:"#fff"}},Object(l.b)("button",{onClick:function(){return i.a.hide("mask")}},"点击销毁该消息项"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个持续3秒的消息项"})}},"点击生成持续3秒的消息项")),showMask:!0,key:"mask",duration:0})}},"带蒙版的消息项")),Object(l.b)("br",null),Object(l.b)("h2",{id:"自定义蒙版样式"},"自定义蒙版样式"),Object(l.b)("p",null,"现在画风越来越奇怪了。"),Object(l.b)("p",null,"甚至可以通过 setMaskStyle, setMaskClassName 这两个API修改当前Toast实例下属蒙版样式。(当然也是持久性的)"),Object(l.b)(r.c,{__position:23,__code:"<button\n  onClick={() => {\n    Toast.setMaskStyle({ backgroundColor: 'green' })\n    Toast.show({\n      Content: `改变蒙版背景色-绿`,\n      duration: 3000,\n      showMask: true,\n    })\n  }}\n>\n  改变蒙版背景色-绿\n</button>\n<button\n  onClick={() => {\n    Toast.setMaskStyle({ backgroundColor: 'red' })\n    Toast.show({\n      Content: `改变蒙版背景色-红`,\n      duration: 3000,\n      showMask: true,\n    })\n  }}\n>\n  改变蒙版背景色-红\n</button>\n<button\n  onClick={() => {\n    Toast.setMaskStyle()\n    Toast.show({\n      Content: `改变蒙版背景色-默认`,\n      duration: 3000,\n      showMask: true,\n    })\n  }}\n>\n  改变蒙版背景色-默认\n</button>",__scope:(T={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},T.DefaultLayout=b.a,T._frontmatter=s,T),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){i.a.setMaskStyle({backgroundColor:"green"}),i.a.show({Content:"改变蒙版背景色-绿",duration:3e3,showMask:!0})}},"改变蒙版背景色-绿"),Object(l.b)("button",{onClick:function(){i.a.setMaskStyle({backgroundColor:"red"}),i.a.show({Content:"改变蒙版背景色-红",duration:3e3,showMask:!0})}},"改变蒙版背景色-红"),Object(l.b)("button",{onClick:function(){i.a.setMaskStyle(),i.a.show({Content:"改变蒙版背景色-默认",duration:3e3,showMask:!0})}},"改变蒙版背景色-默认")),Object(l.b)("br",null),Object(l.b)("h2",{id:"设置蒙版点击事件"},"设置蒙版点击事件"),Object(l.b)("p",null,"其实离真正的Modal还差了个东西 -- 那就是点击蒙版关闭提示。"),Object(l.b)("p",null,"因为消息项不像Modal一般同时只有一个，不可能内置点击蒙版把全部消息项销毁，所以把选择权移交了出来。"),Object(l.b)("p",null,"通过 setMaskClickHandler 这个API修改当前Toast实例下属蒙版click handler。(当然也是持久性的， 如果当前Toast实例存在多种情况复用，记得用完重置clickHandler)"),Object(l.b)(r.c,{__position:25,__code:"<button\n  onClick={() => {\n    Toast.setMaskClickHandler(() => {\n      Toast.hideAll()\n      Toast.setMaskClickHandler()\n    })\n    Toast.show({\n      Content: (\n        <div style={{ padding: 24, backgroundColor: '#fff' }}>\n          <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n          <button\n            onClick={() =>\n              Toast.show({\n                Content: '这是一个持续10秒的消息项',\n                duration: 10000,\n              })\n            }\n          >\n            点击生成持续10秒的消息项\n          </button>\n          点击蒙版销毁全部存在的消息项\n        </div>\n      ),\n      showMask: true,\n      key: 'mask',\n      duration: 0,\n    })\n  }}\n>\n  点击蒙版销毁全部消息项目\n</button>\n<button\n  onClick={() => {\n    Toast.setMaskClickHandler(() => {\n      Toast.hide('mask')\n      Toast.setMaskClickHandler()\n    })\n    Toast.show({\n      Content: (\n        <div style={{ padding: 24, backgroundColor: '#fff' }}>\n          <button onClick={() => Toast.hide('mask')}>点击销毁该消息项</button>\n          <button\n            onClick={() =>\n              Toast.show({\n                Content: '这是一个持续10秒的消息项',\n                duration: 10000,\n              })\n            }\n          >\n            点击生成持续10秒的消息项\n          </button>\n          点击蒙版单独销毁伪Modal消息项\n        </div>\n      ),\n      showMask: true,\n      key: 'mask',\n      duration: 0,\n    })\n  }}\n>\n  点击蒙版单独销毁伪Modal消息项\n</button>",__scope:(g={props:N,DefaultLayout:b.a,Playground:r.c,Toast:i.a,CustomContent:u.a},g.DefaultLayout=b.a,g._frontmatter=s,g),mdxType:"Playground"},Object(l.b)("button",{onClick:function(){i.a.setMaskClickHandler((function(){i.a.hideAll(),i.a.setMaskClickHandler()})),i.a.show({Content:Object(l.b)("div",{style:{padding:24,backgroundColor:"#fff"}},Object(l.b)("button",{onClick:function(){return i.a.hide("mask")}},"点击销毁该消息项"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个持续10秒的消息项",duration:1e4})}},"点击生成持续10秒的消息项"),"点击蒙版销毁全部存在的消息项"),showMask:!0,key:"mask",duration:0})}},"点击蒙版销毁全部消息项目"),Object(l.b)("button",{onClick:function(){i.a.setMaskClickHandler((function(){i.a.hide("mask"),i.a.setMaskClickHandler()})),i.a.show({Content:Object(l.b)("div",{style:{padding:24,backgroundColor:"#fff"}},Object(l.b)("button",{onClick:function(){return i.a.hide("mask")}},"点击销毁该消息项"),Object(l.b)("button",{onClick:function(){return i.a.show({Content:"这是一个持续10秒的消息项",duration:1e4})}},"点击生成持续10秒的消息项"),"点击蒙版单独销毁伪Modal消息项"),showMask:!0,key:"mask",duration:0})}},"点击蒙版单独销毁伪Modal消息项")),Object(l.b)("br",null),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("p",null,"组件提供了一些静态方法，使用方式和参数如下："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.init(container?: HTMLElement) -- 用于函数调用式初始化容器")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.Provider -- 用于组件调用式初始化容器")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.show(config: Object): string | number -- 用于生成一个消息项，返回标识消息项的key，用以手动hide"))),Object(l.b)("p",null,"config对象的可选属性如下"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"属性"),Object(l.b)("th",{parentName:"tr",align:null},"说明"),Object(l.b)("th",{parentName:"tr",align:null},"类型"),Object(l.b)("th",{parentName:"tr",align:null},"默认值"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"*Content"),Object(l.b)("td",{parentName:"tr",align:null},"消息项内容(必填)"),Object(l.b)("td",{parentName:"tr",align:null},"合法的ReactNode"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"key"),Object(l.b)("td",{parentName:"tr",align:null},"消息项标识"),Object(l.b)("td",{parentName:"tr",align:null},"string"),Object(l.b)("td",{parentName:"tr",align:null},"number")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"duration"),Object(l.b)("td",{parentName:"tr",align:null},"消息项持续时间(ms)"),Object(l.b)("td",{parentName:"tr",align:null},"number"),Object(l.b)("td",{parentName:"tr",align:null},"3000")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"preventDuplicate"),Object(l.b)("td",{parentName:"tr",align:null},"防重复"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"unique"),Object(l.b)("td",{parentName:"tr",align:null},"唯一"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"queue"),Object(l.b)("td",{parentName:"tr",align:null},"加入消息队列"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"maximum"),Object(l.b)("td",{parentName:"tr",align:null},"最大消息项数量"),Object(l.b)("td",{parentName:"tr",align:null},"number"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"showMask"),Object(l.b)("td",{parentName:"tr",align:null},"显示蒙版"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"animationType"),Object(l.b)("td",{parentName:"tr",align:null},"消息项过渡动画"),Object(l.b)("td",{parentName:"tr",align:null},'"zoom" ',"|",' "blur" ',"|",' "clipRectSp" ',"|",' "clipRect" ',"|",' "clipCircle" ',"|",' "fade" ',"|",' "flip" ',"|",' "door" ',"|",' "slideUp" ',"|",' "slideDown" ',"|",' "slideRight" ',"|",' "slideLeft" ',"|",' "rotate"'),Object(l.b)("td",{parentName:"tr",align:null},'"zoom"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"animationDuration"),Object(l.b)("td",{parentName:"tr",align:null},"消息项动画持续时间(ms)"),Object(l.b)("td",{parentName:"tr",align:null},"number ","|"," { enter, leave }"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"onClose"),Object(l.b)("td",{parentName:"tr",align:null},"消息项销毁回调"),Object(l.b)("td",{parentName:"tr",align:null},"Function"),Object(l.b)("td",{parentName:"tr",align:null})))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.hide(key: string | number) -- 手动销毁key值对应的消息项")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.hideAll() -- 手动销毁所有消息项")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.setMaskStyle(style?: CSSProperties), Toast.setMaskClassName(className?: string) -- 全局设置当前Toast实例下属蒙版样式")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.setMaskClickHandler(handler?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void)) -- 全局设置当前Toast实例下属蒙版响应点击函数")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.setListStyle(style?: CSSProperties), Toast.setListClassName(className?: string) -- 全局设置当前Toast实例下属消息列表样式")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Toast.setItemWrapperStyle(style?: CSSProperties), Toast.setItemWrapperClassName(className?: string) -- 全局设置当前Toast实例下属消息项容器样式"))))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Toast/demos/index.cn.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-toast-demos-index-cn-mdx-589bab92aa0233c52b0c.js.map
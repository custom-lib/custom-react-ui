{"version":3,"sources":["webpack:///../src/List/demos/index.cn.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","List","BasicDemo","TransitionAnimationDemo","AnimatedHeightDemo","WrapperStyleDemo","isMDXComponent"],"mappings":"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","file":"component---src-list-demos-index-cn-mdx-76690e1995253576f201.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Codes/custom-ui-old/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport List from \"../index\";\nimport BasicDemo from \"./basic\";\nimport TransitionAnimationDemo from \"./transitionAnimation\";\nimport AnimatedHeightDemo from \"./animatedHeight\";\nimport WrapperStyleDemo from \"./wrapperStyle\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h4 {...{\n      \"id\": \"简介\"\n    }}>{`简介`}</h4>\n    <p>{`带有进出场动画的列表`}</p>\n    <h2 {...{\n      \"id\": \"基础用法----list-和-children\"\n    }}>{`基础用法 -- list 和 children`}</h2>\n    <p>{`List组件要求一个包含key关键字的对象数组作为数据源， 作为 list 属性的值。`}</p>\n    <p>{`同时提供一个返回合法JSX.Element的render function(渲染函数)作为children，function中的第一个参数是list中item的值。`}</p>\n    <p>{`这里之所以选择用render function + list 属性这种形式，返回一个和本身的item数据没有任何变化的回调参数，而不是采用map出ReactNode的方式，是考虑到这样做可以有更为严格合理的ts类型限制。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst ListItem = styled.div<{ bgColor: string }>\\`\n    width: 200px;\n    height: 60px;\n    background-color: \\${({ bgColor }) => bgColor};\n    margin-top: 12px;\n\\`;\n\nconst BasicDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n    \n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list}>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </List>\n        </div>\n    )\n}\n`}</code></pre>\n    <Playground __position={0} __code={'<BasicDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      List,\n      BasicDemo,\n      TransitionAnimationDemo,\n      AnimatedHeightDemo,\n      WrapperStyleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <BasicDemo mdxType=\"BasicDemo\" />\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"进出场动画和动画持续时间\"\n    }}>{`进出场动画和动画持续时间`}</h2>\n    <p>{`通过设置 animationType 为 \"zoom\" | \"blur\" | \"clipRectSp\" | \"clipRect\" | \"clipCircle\" | \"fade\" | \"flip\" | \"door\" | \"slideUp\" | \"slideDown\" | \"slideRight\" | \"slideLeft\" | \"rotate\"　设置进出场动画。`}</p>\n    <p>{`默认为 \"zoom\"。`}</p>\n    <p>{`通过设置 animationDuration　属性(ms)，修改弹框进出场动画持续时间。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type animationDuration = number | { enter: number, leave: number }\n`}</code></pre>\n    <p>{`这两个属性可以做为List的属性应用在每个列表项，也可以作为列表项自身的属性（优先级更高）。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst ListItem = styled.div<{ bgColor: string }>\\`\n    width: 200px;\n    height: 60px;\n    background-color: \\${({ bgColor }) => bgColor};\n    margin-top: 12px;\n\\`;\n\nconst TransitionAnimationDemo = () => {\n    const [list, setList] = useState<Item[]>([]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: (key - 1) % 2 === 0 ? '#' + Math.random().toString(16).substr(2, 6).toUpperCase() : 'red',\n                animationType: (key - 1) % 2 === 0 ? 'slideLeft' : undefined,\n                animationDuration: (key - 1) % 2 === 0 ? { enter: 600, leave: 1000 } : undefined\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list} animationType='door' animationDuration={300}>\n                {item => <ListItem bgColor={item.bgColor}>{item.animationType ? '组件自身动画' : '列表全局动画'}</ListItem>}\n            </List>\n        </div>\n    )\n}\n`}</code></pre>\n    <Playground __position={2} __code={'<TransitionAnimationDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      List,\n      BasicDemo,\n      TransitionAnimationDemo,\n      AnimatedHeightDemo,\n      WrapperStyleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <TransitionAnimationDemo mdxType=\"TransitionAnimationDemo\" />\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"高度变化动画\"\n    }}>{`高度变化动画`}</h2>\n    <p>{`通过设置 List 的 animatedHeight 属性为 true 开启进出场高度变化动画。`}</p>\n    <p>{`开启高度变化动画会在 List Item 外额外附着一层容器div元素。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState, useCallback, forwardRef } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\ninterface Item extends ItemProps {\n    bgColor?: string;\n}\nlet key = 0;\nconst ListItem = styled.div<{ bgColor?: string }>\\`\n    width: 200px;\n    height: 60px;\n    background-color: \\${({ bgColor }) => bgColor || 'black'};\n    margin-top: 12px;\n\\`;\nconst AnimatedHeightDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n            })\n            return newList;\n        });\n    }, []);\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <List list={list} animatedHeight>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </List>\n        </div>\n    )\n}\n`}</code></pre>\n    <Playground __position={4} __code={'<AnimatedHeightDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      List,\n      BasicDemo,\n      TransitionAnimationDemo,\n      AnimatedHeightDemo,\n      WrapperStyleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <AnimatedHeightDemo mdxType=\"AnimatedHeightDemo\" />\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"列表项容器样式与泛型阻断\"\n    }}>{`列表项容器样式与泛型阻断`}</h2>\n    <p>{`每个列表项Item外层有一个内置的容器用于动画变化。`}</p>\n    <p>{`容器不带任何样式，一般情况下不用管这个容器。如果你想为Iem设置margin边距，Item的margin属性也会重叠在容器上。`}</p>\n    <p>{`但是如果当你改变Item为BFC时，比如当设置List本身的display为flex时，或者将Item改为inline类型时，margin的重叠现象不再生效。`}</p>\n    <p>{`这时候可以通过ItemWrapperStyle, ItemWrapperClassName属性给Item容器设置margin。`}</p>\n    <p>{`同样的，这两个属性可以做为List的属性应用在每个列表项，也可以作为列表项自身的属性（优先级更高）。`}</p>\n    <p>{`如果用styled-compoennts styled List组件, 组件的泛型输入会被阻断， render function中的类型变为any， 此时可以用 as typeof List 简单地强制声明。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport List, { ItemProps } from '../index';\n\ninterface Item extends ItemProps {\n    bgColor?: string\n}\n\nlet key = 0;\n\nconst StyledList = styled(List)\\`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\\` as typeof List;\n\n\nconst ListItem = styled.div<{ bgColor: string }>\\`\n    width: 200px;\n    height: 60px;\n    background-color: \\${({ bgColor }) => bgColor};\n\\`;\n\nconst WrapperStyleDemo = () => {\n    const [list, setList] = useState<Item[]>([{\n        key,\n        bgColor: 'red'\n    }]);\n\n    const addItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * list.length);\n            const newList = pre.slice();\n            newList.splice(random, 0, {\n                key: ++key,\n                bgColor: '#' + Math.random().toString(16).substr(2, 6).toUpperCase(),\n                ItemWrapperStyle: (key - 1) % 2 === 0 ? { marginBottom: 36 } : undefined\n            })\n            return newList;\n        });\n    }, []);\n\n    const removeItem = useCallback(() => {\n        setList(pre => {\n            const random = Math.floor(Math.random() * pre.length);\n            return pre.filter((_, index) => index !== random);\n        });\n    }, []);\n\n    return (\n        <div>\n            <button onClick={addItem}>add</button>\n            <button onClick={removeItem}>remove</button>\n            <StyledList list={list} animatedHeight ItemWrapperStyle={{ marginBottom: 12 }}>\n                {item => <ListItem bgColor={item.bgColor} />}\n            </StyledList>\n        </div>\n    )\n}\n`}</code></pre>\n    <Playground __position={6} __code={'<WrapperStyleDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      List,\n      BasicDemo,\n      TransitionAnimationDemo,\n      AnimatedHeightDemo,\n      WrapperStyleDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <WrapperStyleDemo mdxType=\"WrapperStyleDemo\" />\n    </Playground>\n    <br />\n    <h2 {...{\n      \"id\": \"其他任意原生html属性事件\"\n    }}>{`其他任意原生html属性、事件`}</h2>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`属性`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`说明`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`数据源`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of item extends { key: number `}{`|`}{` string, duration?: , animationType?: }`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`渲染函数`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(item, ref) => ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`animationType`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`过渡动画`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"zoom\" `}{`|`}{` \"blur\" `}{`|`}{` \"clipRectSp\" `}{`|`}{` \"clipRect\" `}{`|`}{` \"clipCircle\" `}{`|`}{` \"fade\" `}{`|`}{` \"flip\" `}{`|`}{` \"door\" `}{`|`}{` \"slideUp\" `}{`|`}{` \"slideDown\" `}{`|`}{` \"slideRight\" `}{`|`}{` \"slideLeft\" `}{`|`}{` \"rotate\"`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"zoom\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`animationDuration`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`动画持续时间(ms)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number `}{`|`}{` { enter, leave }`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ItemWrapperClassName`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`列表项容器class`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ItemWrapperStyle`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`列表项容器style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React.CSSProperties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`其他`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`html属性`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`如 class, style, onClick 等`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}